(window.webpackJsonp=window.webpackJsonp||[]).push([[186],{649:function(t,a,s){"use strict";s.r(a);var n=s(62),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"java-时区问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-时区问题"}},[t._v("#")]),t._v(" Java 时区问题")]),t._v(" "),s("h2",{attrs:{id:"_1-java-时区相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-java-时区相关"}},[t._v("#")]),t._v(" 1. Java 时区相关")]),t._v(" "),s("h3",{attrs:{id:"时间格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时间格式"}},[t._v("#")]),t._v(" 时间格式")]),t._v(" "),s("p",[t._v("UTC 是以原子时计时，更加精准，适应现代社会的精确计时。不过一般使用不需要精确到秒时，视为等同。GMT 是前世界标准时，UTC 是现世界标准时。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("每年格林尼治天文台会发调时信息，基于 UTC 。")])]),t._v(" "),s("p",[t._v("GMT 和 UTC 可以视为几乎是等同的，UTC 更精准，有闰秒的概念。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("世界标准时间 UTC："),s("code",[t._v("2010-10-12T15:24:22Z")]),t._v(" or "),s("code",[t._v("2010-10-12 15:24:22Z")])]),t._v(" "),s("p",[t._v("其中 "),s("strong",[t._v("T")]),t._v(" 表示时分秒的开始"),s("small",[t._v("（或者日期与时间的间隔）")]),t._v("，"),s("strong",[t._v("Z")]),t._v(" 表示这是一个世界标准时间")])]),t._v(" "),s("li",[s("p",[t._v("本地时间"),s("small",[t._v("（也叫不含时区信息的时间）")]),t._v("："),s("code",[t._v("2010-10-12T15:24:22")])]),t._v(" "),s("p",[t._v("本地时间的末尾没有 "),s("strong",[t._v("Z")]),t._v("。对于不同时区的人而言，如果两者交流间使用的是本地时间，那么会引发歧义。")])]),t._v(" "),s("li",[s("p",[t._v("含有时区的时间："),s("code",[t._v('2017-12-13T09:47:07.153+08:00[Asia/Shanghai]"')])]),t._v(" "),s("p",[s("code",[t._v("+08:00")]),t._v(" 表示该时间是由世界标准时间加了 8 个小时得到的，"),s("code",[t._v("[Asia/Shanghai]")]),t._v(" 表示时区。")]),t._v(" "),s("p",[t._v("由于 "),s("code",[t._v("+08:00")]),t._v(" 的存在，所以将表示时区的 "),s("code",[t._v("[Asia/Shanghai]")]),t._v(" 省略掉，也不会导致时间概念上的歧义。")])])]),t._v(" "),s("h3",{attrs:{id:"表示时间相关的类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#表示时间相关的类"}},[t._v("#")]),t._v(" 表示时间相关的类")]),t._v(" "),s("p",[t._v("在 Java 编码中，表示时间的类主要有个：String、Instant、LocalDateTime、ZonedDateTime 。")]),t._v(" "),s("p",[s("strong",[t._v("String")]),t._v(" 是字符串形式的时间，"),s("strong",[t._v("Instant")]),t._v(" 是时间戳，"),s("strong",[t._v("LocalDateTime")]),t._v(" 是不含时区信息的时间，"),s("strong",[t._v("ZonedDateTime")]),t._v(" 是含有时区信息的时间。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("LocalDateTime")]),t._v(" "),s("p",[t._v("符合格式的 String 可以直接转换为 LocalDateTime 。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LocalDateTime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2019-12-15 10:10:10"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DateTimeFormatter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ofPattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"yyyy-MM-dd HH:mm:ss"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("LocalDateTime 字面意思是本地时间，实际上它可以理解为不含时区信息的时间，只储存了年月日时分秒，要表达是哪里的时间需要时区解释，即，这是一个逻辑上有歧义的时间。")])]),t._v(" "),s("li",[s("p",[t._v("Instant 与 ZonedDateTime")]),t._v(" "),s("p",[t._v("Instant 是时间戳，是指世界标准时格林威治时间 1970 年 01 月 01 日 00 时 00 分 00 秒"),s("small",[t._v("（即北京时间 1970 年 01 月 01 日 08 时 00 分 00 秒）")]),t._v("起至现在的总秒数。")]),t._v(" "),s("p",[t._v("注意，由此可见 Instant 本身已经携带了时区信息，也就是 0 时区。"),s("small",[t._v("当然，这只是默认值，有需要的话你可以指定的。")])]),t._v(" "),s("p",[t._v("ZonedDateTime 是含有时区信息的时间，可以理解为它是 Instant 的格式化对象。")]),t._v(" "),s("p",[t._v("JDK 8 以前的时区是用 TimeZone，TimeZone ID 是在 java 里 ZoneInfoFile 类加载的。在 jvm 初始化的时候，会读取 jdk 安装目录下的 "),s("code",[t._v("${java.home}/jre/lib/tzdb.dat")]),t._v("，放到其成员变量为 zones 的 ConcurrentHashMap 里。当调用 TimeZone.getTimeZone(id) 方法时，会用 id 到这个 map 里进行匹配获取到指定 id 的时区。其中"),s("code",[t._v('TimeZone.getTimeZone("Asia/Shanghai")')]),t._v(" 和 "),s("code",[t._v('TimeZone.getTimeZone("GMT+8")')]),t._v(" 是相同的，可以相互替换使用。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ZonedDateTime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ofInstant")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Instant")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ZoneId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("systemDefault")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toInstant")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ZonedDateTime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ofInstant")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Instant")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Australia/Darwin"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toInstant")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("相同的 Instant，在不同的时区有不同的展示时间，所以在用 Instant 构造 ZonedDateTime 的时候需要传入时区；ZonedDateTime 可以直接转化为 Instant ，并且不同的 ZonedDateTime 可能会生成同样的 Instant 。")])])]),t._v(" "),s("h2",{attrs:{id:"_2-时区转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-时区转换"}},[t._v("#")]),t._v(" 2. 时区转换")]),t._v(" "),s("p",[t._v("用户输入的 String 类型的时间是没有时区信息的，需要人为指定时区再解析。")]),t._v(" "),s("p",[t._v("解析的步骤分 2 步： 先确定用户时区")]),t._v(" "),s("ol",[s("li",[s("p",[t._v('把用户输入的时间转化为世界标准时间；Instant.parse("2010-10-12T15:24:22Z")')])]),t._v(" "),s("li",[s("p",[t._v("再把世界标准时间转为需要的时区的时间。ZonedDateTime.ofInstant(instant,ZoneId.systemDefault());")])])]),t._v(" "),s("h2",{attrs:{id:"_3-不同地区的服务器统一时间的解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-不同地区的服务器统一时间的解决方案"}},[t._v("#")]),t._v(" 3. 不同地区的服务器统一时间的解决方案")]),t._v(" "),s("p",[t._v("首先后端封装一个接口后获取服务器相对 GMT（格林尼治标准时间）时间的偏移量：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeZone")]),t._v(" zone "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeZone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDefault")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("zone"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRawOffset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("这段代码放在不同时区的服务器上执行结果会不同"),s("small",[t._v("（前提是服务器的时区设置跟本地时区一致）")]),t._v("。如果在泰国执行结果为 25200000ms ，换算成小时为 7 ，说明泰国的时区的偏移量相对于 GMT 标准时间相差 7 小时。下文简称“时区偏移量”。")]),t._v(" "),s("p",[t._v("前端首先调用该接口获取服务器的时区偏移量，再在浏览器上获取本地的时区偏移量，计算出两个偏移量的差值。本地浏览器上获取当前的时间戳，减去上一步计算出来的差值即可得到服务器这个时间的时间戳，把这个时间戳传给后端 再转换成时间，就是服务器对应的时间，存入数据库即可。")]),t._v(" "),s("p",[t._v("前端：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 服务的时区偏移量，通过接口获得，注意换成负值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" serveroffset"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("25200000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取本地浏览器的时区偏移量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" localOffset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTimezoneOffset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("60000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 得到本地和偏移量的差值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" deffoffset"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("localOffset"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("serveroffset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取本地浏览器时间戳")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" localTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 计算出传到服务器的时间戳")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" servertime"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("localTime"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("deffoffset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("通过上述方式，可以实现服务器全球各地部署，系统都可以正常使用。")])])}),[],!1,null,null,null);a.default=e.exports}}]);