(window.webpackJsonp=window.webpackJsonp||[]).push([[215],{684:function(a,s,t){"use strict";t.r(s);var n=t(62),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"java-classloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-classloader"}},[a._v("#")]),a._v(" Java ClassLoader")]),a._v(" "),t("h2",{attrs:{id:"_1-类加载机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-类加载机制"}},[a._v("#")]),a._v(" 1. 类加载机制")]),a._v(" "),t("p",[a._v("Java 中的源码 "),t("code",[a._v(".java")]),a._v(" 文件会在运行前被编译成 "),t("code",[a._v(".class")]),a._v(" 文件，文件内的字节码的本质就是一个『字节数组』，它有特定的复杂的内部格式，Java 类初始化的时候会调用 java.lang.ClassLoader 加载字节码，.class 文件中保存着 Java 代码经转换后的虚拟机指令，当需要使用某个类时，虚拟机将会加载它的 .class 文件，并创建对应的 class 对象，将 class 文件加载到虚拟机的内存，而在 JVM 中类的查找与装载就是由 ClassLoader 完成的，而程序在启动的时候，并不会一次性加载程序所要用的所有 class 文件，而是根据程序的需要，来动态加载某个 class 文件到内存当中的，从而只有 class 文件被载入到了内存之后，才能被其它 class 所引用。所以 ClassLoader 就是用来动态加载 class 文件到内存当中用的。")]),a._v(" "),t("h2",{attrs:{id:"_2-类加载方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-类加载方式"}},[a._v("#")]),a._v(" 2. 类加载方式")]),a._v(" "),t("p",[a._v("Java 类加载方式分为『显式』和『隐式』：")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("显式：利用反射来加载一个类")])]),a._v(" "),t("li",[t("p",[a._v("隐式：通过 ClassLoader 来动态加载，"),t("code",[a._v("new 一个类")]),a._v(" 或者 "),t("code",[a._v("类名.方法名")]),a._v(" 返回一个类")])])]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Test")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadClassTest")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Exception")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 1. 反射加载")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" aClass "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("forName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"java.lang.Runtime"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("aClass"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 2. ClassLoader 加载")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" aClass1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getSystemClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"java.lang.ProcessBuilder"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("aClass1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("那也就是其实可以通过 "),t("code",[a._v("ClassLoader.loadClass()")]),a._v(" 代替 "),t("code",[a._v("Class.forName()")]),a._v(" 来获取某个类的class对象。")]),a._v(" "),t("h2",{attrs:{id:"_3-classloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-classloader"}},[a._v("#")]),a._v(" 3. ClassLoader")]),a._v(" "),t("p",[a._v("ClassLoader（类加载器）主要作用就是将 class 文件读入内存，并为之生成对应的 java.lang.Class 对象。")]),a._v(" "),t("p",[a._v("JVM 中存在 3 个内置 ClassLoader：")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("BootstrapClassLoader 启动类加载器")]),a._v(" "),t("p",[a._v("负责加载 JVM 运行时核心类，这些类位于 "),t("strong",[a._v("JAVA_HOME/lib/rt.jar")]),a._v(" 文件中，我们常用内置库 "),t("code",[a._v("java.xxx.*")]),a._v(" 都在里面，比如 "),t("code",[a._v("java.util.*")]),a._v(" 、"),t("code",[a._v("java.io.*")]),a._v(" 、"),t("code",[a._v("java.nio.*")]),a._v(" 、"),t("code",[a._v("java.lang.*")]),a._v(" 等等。")])]),a._v(" "),t("li",[t("p",[a._v("ExtensionClassLoader 扩展类加载器")]),a._v(" "),t("p",[a._v("负责加载 JVM 扩展类，比如 swing 系列、内置的 js 引擎、xml 解析器 等等，这些库名通常以 javax 开头，它们的 jar 包位于 JAVA_HOME/lib/ext/*.jar 中。")])]),a._v(" "),t("li",[t("p",[a._v("AppClassLoader 系统类加载器")]),a._v(" "),t("p",[a._v("它才是直接面向我们用户的加载器，它会加载 Classpath 环境变量里定义的路径中的 jar 包和目录。我们自己编写的代码以及使用的第三方 jar 包通常都是由它来加载的。")])])]),a._v(" "),t("p",[a._v("除了 Java 自带的 ClassLoader 外，还可以自定义 ClassLoader，自定义的 ClassLoader 都必须直接或间接继承自 java.lang.ClassLoader 类"),t("small",[a._v("（你可以继承 ExtensionClassLoader 和 AppClassLoader）")]),a._v("。")]),a._v(" "),t("p",[a._v("需要主机的是，Bootstrap ClassLoader 并不继承自 ClassLoader ，因为它不是一个普通的 Java 类，底层由 C++ 编写，已嵌入到了 JVM 内核当中，当 JVM 启动后，Bootstrap ClassLoader 也随着启动，负责加载完核心类库后，并构造 Extension ClassLoader 和 App ClassLoader 类加载器。")]),a._v(" "),t("h2",{attrs:{id:"_4-类加载流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-类加载流程"}},[a._v("#")]),a._v(" 4. 类加载流程")]),a._v(" "),t("p",[a._v("类加载指的是在 .java 文件编译成 .class 字节码文件后，当需要使用某个类时，虚拟机将会加载它的 .class 文件，将 .class 文件读入内存，并在内存中为之创建一个 java.lang.Class 对象。但是实现步骤看起来会比较空洞和概念化，暂时不去深入研究，理解类加载是做什么的并了解加载过程即可。后续有刚需再去深入。")]),a._v(" "),t("p",[a._v("类加载大致分为三个步骤：加载、连接、初始化。")]),a._v(" "),t("h3",{attrs:{id:"a-加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#a-加载"}},[a._v("#")]),a._v(" a. 加载")]),a._v(" "),t("p",[a._v("类加载指的是将 .class 文件读入内存，并为之创建一个 java.lang.Class 对象，即程序中使用任何类时，也就是任何类在加载进内存时，系统都会为之建立一个 java.lang.Class 对象，这个 Class 对象包含了该类的所有信息，如 Filed，Method 等，系统中所有的类都是 java.lang.Class 的实例。")]),a._v(" "),t("p",[a._v("类的加载由类加载器完成，JVM 提供的类加载器叫做系统类加载器"),t("small",[a._v("（上述三个）")]),a._v("，此外还可以通过自定义类加载器加载。")]),a._v(" "),t("p",[a._v("通常可以用如下几种方式加载类的二进制数据：")]),a._v(" "),t("ul",[t("li",[a._v("从本地文件系统加载 .class 文件。")]),a._v(" "),t("li",[a._v("从JAR包中加载 .class 文件，如 JAR 包的数据库启驱动类。")]),a._v(" "),t("li",[a._v("通过网络加载 .class 文件。")]),a._v(" "),t("li",[a._v("把一个 Java 源文件动态编译并执行加载。")])]),a._v(" "),t("h3",{attrs:{id:"b-链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#b-链接"}},[a._v("#")]),a._v(" b. 链接")]),a._v(" "),t("p",[a._v("链接阶段负责把类的二进制数据合并到 JRE 中，其又可分为如下三个阶段：")]),a._v(" "),t("ol",[t("li",[a._v("验证：确保加载的类信息符合 JVM 规范，无安全方面的问题。")]),a._v(" "),t("li",[a._v("准备：为类的静态 Field 分配内存，并设置初始值。")]),a._v(" "),t("li",[a._v("解析：将类的二进制数据中的符号引用替换成直接引用。")])]),a._v(" "),t("h3",{attrs:{id:"c-初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#c-初始化"}},[a._v("#")]),a._v(" c. 初始化")]),a._v(" "),t("p",[a._v("类加载最后阶段，若该类具有超类，则对其进行初始化，执行静态初始化器和静态初始化成员变量（如前面只初始化了默认值的static变量将会在这个阶段赋值，成员变量也将被初始化）。")]),a._v(" "),t("h2",{attrs:{id:"_5-双亲委派机制基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-双亲委派机制基本概念"}},[a._v("#")]),a._v(" 5. 双亲委派机制基本概念")]),a._v(" "),t("p",[a._v("前面提到了 Java 自带 3 个 ClassLoader，包括我们也可以实现自定义 ClassLoader 完成类加载，但是具体某个类的加载用的是哪个 ClassLoader 呢。这里涉及到一个『"),t("strong",[a._v("双亲委派")]),a._v("』机制。")]),a._v(" "),t("p",[a._v("下图基本概述了双亲委派机制（先走蓝色箭头再走红色箭头）")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/jvm/img/classloader-01.png",alt:"classloader-01.png"}})]),a._v(" "),t("p",[a._v("双亲委派简单理解：向上委派，向下加载。这个过程非常类似于递归，分为『递』和『归』两个环节。")]),a._v(" "),t("p",[a._v("当一个 .class 文件要被加载时：不考虑我们自定义类加载器，")]),a._v(" "),t("ul",[t("li",[a._v("首先会在 AppClassLoader 中检查是否加载过，如果有那就无需再加载了。如果没有，那么会拿到父加载器，然后调用父加载器的 loadClass 方法。父类中同理也会先检查自己是否已经加载过，如果没有再往上。直到到达 Bootstrap classLoader 之前，都是在检查是否加载过，并不会选择自己去加载。")]),a._v(" "),t("li",[a._v("直到 BootstrapClassLoader，已经没有父加载器了"),t("small",[a._v("（无法再继续向上委派了）")]),a._v("，这时候开始考虑自己是否能加载了; 如果自己无法加载，会下沉到子加载器去加载，一直到最底层（向下加载）。如果没有任何加载器能加载，就会抛出 ClassNotFoundException 异常。")])]),a._v(" "),t("p",[a._v("那么为什么加载类的时候需要双亲委派机制呢？")]),a._v(" "),t("p",[a._v("采用双亲委派模式的是好处是 Java 类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子 ClassLoader 再加载一次。")]),a._v(" "),t("p",[a._v("其次是，如果有人想替换系统级别的类：String.java。篡改它的实现，在这种机制下这些系统的类已经被 Bootstrap ClassLoader 加载过了（为什么？因为当一个类需要加载的时候，最先去尝试加载的就是 BootstrapClassLoader），所以其他类加载器并没有机会再去加载，从一定程度上防止了危险代码的植入。")])])}),[],!1,null,null,null);s.default=e.exports}}]);