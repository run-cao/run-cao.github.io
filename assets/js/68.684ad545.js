(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{539:function(s,t,a){"use strict";a.r(t);var e=a(62),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"bem-命名规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bem-命名规范"}},[s._v("#")]),s._v(" BEM 命名规范")]),s._v(" "),a("h2",{attrs:{id:"_1-关于-bem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-关于-bem"}},[s._v("#")]),s._v(" 1. 关于 BEM")]),s._v(" "),a("p",[s._v("不一样的团队在写 CSS 选择器"),a("small",[s._v("（CSS Selectors）")]),s._v("有不一样的方法。有些团队使用的是连字符分隔"),a("small",[s._v("（hyphen delimiters）")]),s._v("法，还有一些倾向于使用一种叫 "),a("strong",[s._v("BEM")]),s._v(" 的命名法，这种方法更加有条理。")]),s._v(" "),a("p",[s._v("总的来说，这些 CSS 命名规范试图解决 3 类问题：")]),s._v(" "),a("ol",[a("li",[s._v("仅从名字就能知道一个 CSS 选择器具体做什么；")]),s._v(" "),a("li",[s._v("从名字能大致清楚一个选择器可以在哪里使用；")]),s._v(" "),a("li",[s._v("从 CSS 类的名称可以看出它们之间的联系。")])]),s._v(" "),a("p",[s._v("不知你是否见过这样的类名：")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".nav--secondary")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  ...\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".nav__header")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  ...\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("这就是 "),a("strong",[s._v("BEM")]),s._v(" 命名规范。")]),s._v(" "),a("h2",{attrs:{id:"_2-b-代表元素-blocks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-b-代表元素-blocks"}},[s._v("#")]),s._v(" 2. B 代表元素（Blocks）")]),s._v(" "),a("p",[s._v("BEM 规范试图将整个用户界面分解成一个个小的可重复使用的组件。")]),s._v(" "),a("p",[s._v("让我们来看看下图：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/css/img/BEM-01.png",alt:"BEM-01"}})]),s._v(" "),a("p",[s._v("这个火柴人代表了一个组件，比如说一个设计区块。")]),s._v(" "),a("p",[s._v("或许你已经猜到了 BEM 这里的 B 意为『"),a("strong",[s._v("区块")]),s._v("』（‘Block’）。")]),s._v(" "),a("p",[s._v("在实际中，这里『"),a("strong",[s._v("区块")]),s._v("』可以表示一个网站导航、页眉、页脚或者其他一些设计区块。")]),s._v(" "),a("p",[s._v("根据上述解释，那么这个组件的理想类名称即是 "),a("code",[s._v("stick-man")]),s._v(" 。")]),s._v(" "),a("p",[s._v("组件的样式应写成这样：")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".stick-man")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("在这里我们使用了连字符分隔法，很好！")]),s._v(" "),a("p",[s._v("理论上来说，Block 是一个你以后可以重用的单元！")]),s._v(" "),a("p",[a("strong",[s._v("Block 的取名（名字）应该描述的是你这个组件是什么，而不是描述它像什么")]),s._v("！ block 的名字不能取描述外观的文字。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/css/img/BEM-02.png",alt:"BEM-02"}})]),s._v(" "),a("h2",{attrs:{id:"_2-e-代表元素-elements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-e-代表元素-elements"}},[s._v("#")]),s._v(" 2. E 代表元素（Elements）")]),s._v(" "),a("p",[s._v("BEM 中的 E 代表着元素。")]),s._v(" "),a("p",[s._v("整体的区块设计往往并不是孤立的。")]),s._v(" "),a("p",[s._v("比方说，这个火柴人有一个头部（head），两只漂亮的手臂（arms）和双脚（feet）。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/css/img/BEM-03.png",alt:"BEM-03"}})]),s._v(" "),a("p",[s._v("这些 "),a("code",[s._v("head")]),s._v("、 "),a("code",[s._v("feet")]),s._v(" 和 "),a("code",[s._v("arms")]),s._v(" 都是组件中的元素。它们可视作子组件（child components），也就是父组件的组成部分。")]),s._v(" "),a("p",[s._v("如果使用 BEM 命名规范的话，这些元素的类名都可以通过在『"),a("strong",[s._v("两条下划线")]),s._v("』后加上元素名称来产生。")]),s._v(" "),a("p",[s._v("比如说：")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".stick-man__head")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".stick-man__arms")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".stick-man__feet")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("h2",{attrs:{id:"_3-m-代表修饰符-modifiers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-m-代表修饰符-modifiers"}},[s._v("#")]),s._v(" 3. M 代表修饰符（Modifiers）")]),s._v(" "),a("p",[s._v("M 在 BEM 命名法中代表修饰符。")]),s._v(" "),a("p",[s._v("如果说这个火柴人有个 blue 或者 red 这样的修饰符怎么办呢？")]),s._v(" "),a("p",[s._v("在现实场景里，这可能是一个 "),a("code",[s._v("red")]),s._v(" 或者 "),a("code",[s._v("blue")]),s._v(" 的按钮。这就是之前在讲的组件当中的限定修饰。")]),s._v(" "),a("p",[s._v("如果使用 BEM 的话，这些修饰符的类名都可以通过在『"),a("strong",[s._v("两条连字符")]),s._v("』后加上元素名来产生。")]),s._v(" "),a("p",[s._v("比如说：")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".stick-man--blue")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".stick-man--red")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("最后这个例子展示的是父组件加修饰符。不过这种情况并不经常出现。")]),s._v(" "),a("p",[s._v("假如我们这个火柴人拥有另一个不一样的头部大小呢？")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/css/img/BEM-04.png",alt:"BEM-04"}})]),s._v(" "),a("p",[s._v("这一次元素被加上了修饰符。记住，元素指一个整体封装区块中的一个子组件。")]),s._v(" "),a("p",[a("code",[s._v(".stick-man")]),s._v(" 表示区块（Block）， "),a("code",[s._v(".stick-man__head")]),s._v(" 表示元素（the element）。")]),s._v(" "),a("p",[s._v("从上例可以看出，双连字符也可以这样使用：")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".stick-man__head--small")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".stick-man__head--big")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("重申一次，上例中使用的双连字符是用来指代修饰符的。")]),s._v(" "),a("p",[s._v("这样你都明白了吧。")]),s._v(" "),a("p",[s._v("这就是 BEM 的基本用法。")]),s._v(" "),a("p",[s._v("个人来说，我在小项目中一般只用连字符分割法来写类名，在用户界面更复杂的项目中使用 BEM 方法。")]),s._v(" "),a("p",[s._v("关于 BEM，从"),a("a",{attrs:{href:"http://getbem.com/naming/",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),a("OutboundLink")],1),s._v("了解更多。")]),s._v(" "),a("h2",{attrs:{id:"_4-缺点和改进方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-缺点和改进方案"}},[s._v("#")]),s._v(" 4. 缺点和改进方案")]),s._v(" "),a("ul",[a("li",[s._v("BEM 的一个槽点是，命名方式长而难看，书写不雅。相比 BEM 格式带来的便利来说，我们应客观看待。")]),s._v(" "),a("li",[s._v("而且，一般来说会使用通过 LESS/SASS 等预处理器语言来编写 CSS，利用其语言特性书写起来要简单很多。")])]),s._v(" "),a("p",[s._v("BEM 和预编译结合：")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".header")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token selector"}},[s._v("&__body")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("padding")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 20px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token selector"}},[s._v("&__button")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token selector"}},[s._v("&--primary")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("background")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" #329FD9"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token selector"}},[s._v("&--default")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("background")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" none"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);