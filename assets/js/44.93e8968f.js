(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{517:function(s,t,a){"use strict";a.r(t);var e=a(62),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"docker-私服-registry"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-私服-registry"}},[s._v("#")]),s._v(" Docker 私服：Registry")]),s._v(" "),a("p",[s._v("Docker 私服是存放镜像的本地仓库，类似于 docker hub 。不过私服是本地的仓库，方便自己公司部署管理由微服务打包成的 docker 镜像。")]),s._v(" "),a("p",[s._v("我们可以通过开源软件 Registry 来搭建 Docker 私服。Registry 早期的版本采用 python 编写，在 pull 和 push 时性能有点感人。从 2.0 版本开始 Registry 采用 go 语言重新编写了整个项目，大大优化了 pull 和 push 的性能。")]),s._v(" "),a("p",[s._v("有意思的是 Docker 官方提供了 registry 的镜像，我们可以直接使用该registry 的 docker 镜像来构建一个 docker 私服。")]),s._v(" "),a("h2",{attrs:{id:"_1-启动-registry-服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-启动-registry-服务"}},[s._v("#")]),s._v(" 1. 启动 Registry 服务")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("步骤 1：")]),s._v(" 下载 docker registry2 镜像")])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("docker pull registry:2\n")])])]),a("p",[s._v("当前（2021-12-21）"),a("code",[s._v("2")]),s._v(" 版本指的是 "),a("code",[s._v("2.7.1")]),s._v(" ，并且也是 "),a("code",[s._v("latest")]),s._v(" 。")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("步骤 2：")]),s._v(" 创建并启动容器")])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("docker run -d "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  --name registry "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  --restart"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("always "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  -v /usr/local/registry:/var/lib/registry  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  -p "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5000")]),s._v(":5000 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  registry:2\n")])])]),a("p",[s._v("你可以通过 "),a("code",[s._v("docker ps")]),s._v(" 查看 registry 的运行状态。另外，Registry 对外暴露了一个 "),a("code",[s._v("/v2/_catalog")]),s._v(" 的 URI 供你来查询其下存储的镜像信息，你可向它发出 HTTP GET 请求。例如:")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("curl -X GET http://localhost:5000/v2/_catalog\n")])])]),a("h2",{attrs:{id:"_2-本地上传镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-本地上传镜像"}},[s._v("#")]),s._v(" 2. 本地上传镜像")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("步骤 4：")]),s._v(" 上传、验证")])]),s._v(" "),a("ol",[a("li",[a("p",[s._v("从 docker hub 下载 hello-world"),a("small",[s._v("（或任意什么镜像）")]),s._v("镜像。")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("docker pull hello-world:latest\n")])])])]),s._v(" "),a("li",[a("p",[s._v("为下载下来的 hello-world 镜像打上 Tag ，为后续的 push 操作做准备。")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("docker tag hello-world localhost:5000/hello-world:latest\n")])])])]),s._v(" "),a("li",[a("p",[s._v("执行 push 操作，上传镜像到 registry 。")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("docker push localhost:5000/hello-world:latest\n")])])])]),s._v(" "),a("li",[a("p",[s._v("验证")]),s._v(" "),a("p",[s._v("发出 HTTP GET 请求查询 registy 上的 hello-world 镜像：")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -X GET http://localhost:5000/v2/hello-world/tags/list\n")])])]),a("p",[s._v("你会看到类似如下信息：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{"name":"hello-world","tags":["latest"]}\n')])])]),a("p",[s._v("从 registy 下载 hello-world 镜像：")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 先删除官方镜像，以免造成混淆")]),s._v("\ndocker rmi docker.io/hello-world:latest\n\ndocker pull localhost:5000/hello-world\n")])])])])]),s._v(" "),a("h2",{attrs:{id:"_3-本地卸载-简易版"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-本地卸载-简易版"}},[s._v("#")]),s._v(" 3. 本地卸载（简易版）")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("打开镜像的存储目录，如有-V操作打开挂载目录也可以，删除镜像文件夹")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("docker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("容器名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf /var/lib/registry/docker/registry/v2/repositories/"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("镜像名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])])]),a("p",[s._v("如果你使用了 -v 操作挂载本地目录，那么去删除本地目录中的内容也是一样的。当然，你仍然 “进入” 容器删除容器下的镜像文件夹本质上还是删除的本地目录。")]),s._v(" "),a("p",[s._v("例如：")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("docker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" registry "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf /var/lib/registry/docker/registry/v2/repositories/hello-world\n")])])])]),s._v(" "),a("li",[a("p",[s._v("执行垃圾回收操作，注意 "),a("code",[s._v("2.4")]),s._v(" 版本以上的 registry 才有此功能")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("docker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" registry bin/registry garbage-collect /etc/docker/registry/config.yml\n")])])])])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("标准删除")]),s._v(" "),a("p",[s._v("和发出 HTTP 请求向 registry 查询其下的镜像一样，我们本应该向 Registry 发送 Delete 请求要求它去删除指定的镜像。")]),s._v(" "),a("p",[s._v("当然，Registry 在收到你的 Delete 请求后，它再来执行上述的删除操作。")])])])}),[],!1,null,null,null);t.default=r.exports}}]);