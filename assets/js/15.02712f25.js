(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{488:function(t,a,s){"use strict";s.r(a);var n=s(62),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"线性表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线性表"}},[t._v("#")]),t._v(" 线性表")]),t._v(" "),s("h2",{attrs:{id:"关于线性表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于线性表"}},[t._v("#")]),t._v(" 关于线性表")]),t._v(" "),s("p",[t._v("线性表是一个对象，其数据是由有次序的项构成的。每项由其在表中的的位置来标识。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("线性表的『表』字很容易让大家联想到数据库的 table 。实际上，这个『表』字是『"),s("strong",[t._v("链表")]),t._v("』中的那个『表』。")])]),t._v(" "),s("p",[t._v("线性表提供了组织数据的一种方式，形如待办事项清单、礼品单等。每个清单都有第一项、最后一项，还有中间项。即表中的项都有一个位置：第一、第二、第三等等。"),s("small",[t._v("项目的位置对你而言，可能有价值，也可能没有价值，这取决于你的使用场景。")]),t._v("当在表中添加一项时，或许总将它加在最后，或许将它插入在表中已有的两项之间。")]),t._v(" "),s("p",[t._v("通常，线性表应该支持如下操作：")]),t._v(" "),s("ul",[s("li",[t._v("一般地，可以在表尾（end）添加（add）一个新项；")]),t._v(" "),s("li",[t._v("实际上，可以在任何地方添加一个新项：在开头、在结尾或在项的中间；")]),t._v(" "),s("li",[t._v("可以勾掉一项，即删除（remove）它；")]),t._v(" "),s("li",[t._v("可以删除所有（remove all）项目；")]),t._v(" "),s("li",[t._v("可以替换（replace）一项；")]),t._v(" "),s("li",[t._v("可以查看（look at）任意的项；")]),t._v(" "),s("li",[t._v("可以查看所有（look at all）项；")]),t._v(" "),s("li",[t._v("可以发现线性表是否含有（contain）某项；")]),t._v(" "),s("li",[t._v("可以对线性表中的项数进行技术（count）；")]),t._v(" "),s("li",[t._v("可以查看线性表是否有空（empty）。")])]),t._v(" "),s("h2",{attrs:{id:"java-集合框架-接口-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-集合框架-接口-list"}},[t._v("#")]),t._v(" Java 集合框架：接口 List")]),t._v(" "),s("p",[t._v("Java 标准包 java.util 所含有的接口 List ，它所描述的功能就是一个线性表。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" newEntry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：在表尾添加一个新项\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" newEntry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：在线性表给定的位置添加一个新项\n             "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：从线性表中删除给定位置的项\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：从线性表中删除所有项\n     "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" anEntry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：用给定的项替换线性表中给定位置的项\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：获取线性表给定位置的项\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("contains")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" anEntry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：查看线性表中是否含有给定的项\n                      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：得到线性表中的项数\n               "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEmpty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：查看线性表是否为空\n")])])]),s("h2",{attrs:{id:"java-集合框架-类-arraylist-和-linkedlist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-集合框架-类-arraylist-和-linkedlist"}},[t._v("#")]),t._v(" Java 集合框架：类 ArrayList 和 LinkedList")]),t._v(" "),s("p",[t._v("Java 自带的 ArrayList 和 LinkedList 实现了 List 接口，即实现了线性表。")]),t._v(" "),s("ul",[s("li",[t._v("ArrayList 底层使用可变大小的数组来实现的。")]),t._v(" "),s("li",[t._v("LinkedList 底层使用链表来实现的。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);