(window.webpackJsonp=window.webpackJsonp||[]).push([[174],{635:function(t,e,a){"use strict";a.r(e);var l=a(62),v=Object(l.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"java-集合底层原理剖析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-集合底层原理剖析"}},[t._v("#")]),t._v(" Java 集合底层原理剖析")]),t._v(" "),a("h2",{attrs:{id:"_1-java-集合介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-java-集合介绍"}},[t._v("#")]),t._v(" 1. Java 集合介绍")]),t._v(" "),a("p",[t._v("Java 集合是一个存储相同类型数据的容器，类似数组，集合可以不指定长度，但是数组必须指定长度。集合类主要从 "),a("strong",[t._v("Collection")]),t._v(" 和 "),a("strong",[t._v("Map")]),t._v(" 两个根接口派生出来，比如常用的 ArrayList、LinkedList、HashMap、HashSet、ConcurrentHashMap 等等。")]),t._v(" "),a("el-tabs",[a("el-tab-pane",{attrs:{label:"Collection 体系 - 线程不安全"}},[a("p",[a("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/java/img/collection-1.png",alt:"collection-1"}})])]),t._v(" "),a("el-tab-pane",{attrs:{label:"Collection 体系 - 线程安全"}},[a("p",[a("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/java/img/collection-2.png",alt:"collection-2"}})])]),t._v(" "),a("el-tab-pane",{attrs:{label:"Map 体系 - 线程不安全"}},[a("p",[a("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/java/img/map-1.png",alt:"map-1"}})])]),t._v(" "),a("el-tab-pane",{attrs:{label:"Map 体系 - 线程安全"}},[a("p",[a("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/java/img/map-2.png",alt:"map-2"}})])])],1),t._v(" "),a("p",[t._v("JDK 中的集合框架首次出现在 1.0 版本，随后在 1.2 和 1.5 版本中有较大更新。"),a("small",[t._v("其它版本的更新对于集合框架的更新都是小更新。")])]),t._v(" "),a("p",[t._v("大体上，这三个版本的主要 feature 在于：")]),t._v(" "),a("ol",[a("li",[t._v("Plan A：线性安全实现。")]),t._v(" "),a("li",[t._v("Plan B：线性不安全实现。"),a("small",[t._v("性能更好。")])]),t._v(" "),a("li",[t._v("Plan A plus：线性安全实现的另一种方案。"),a("small",[t._v("用来和 Plan A “打擂台”")]),t._v("。")])]),t._v(" "),a("h2",{attrs:{id:"_2-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-list"}},[t._v("#")]),t._v(" 2. List")]),t._v(" "),a("p",[t._v("List 体系在 JDK 1.0 的时候就已经存在了。"),a("small",[t._v("作为它的兄弟，Set 接口反而是在 JDK 1.2 中才被补充进集合框架。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Collection                   (jdk 1.0)\n└── List                     (jdk 1.0)\n    |── Vector / Stack       (jdk 1.0)\n    |── ArrayList            (jdk 1.2)\n    |── LinkedList           (jdk 1.2)\n    └── CopyOnWriteArrayList (jdk 1.5)\n")])])]),a("el-tabs",[a("el-tab-pane",{attrs:{label:"Vector"}},[a("p",[t._v("Vector 实现的是数据结构领域中的『基于数组实现的线性表』。"),a("small",[t._v("线性表也叫『向量』，所以它用上了 vector 这个单词。")])]),t._v(" "),a("p",[t._v("Vector 诞生于 JDK 1.0 时代，实现的是 List 接口。底层是通过『"),a("strong",[t._v("动态数组")]),t._v("』实现的。"),a("small",[t._v("『动态数组』是指当数组容量不足以存放新的元素时，会创建新的数组，然后把原数组中的内容复制到新数组。")])]),t._v(" "),a("p",[a("strong",[t._v("特征")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("查询效率高、插入、删除效率低，因为需要移动元素；")]),t._v(" "),a("li",[t._v("线程安全。")]),t._v(" "),a("li",[t._v("允许添加 null 值，且允许添加多个；")]),t._v(" "),a("li",[t._v("未指定初始化大小时，默认的大小为 10 。每次扩容时变为原来大小的 2 倍。在批量添加时，如果扩容后仍不够，则按实际需要扩容。")])])]),t._v(" "),a("el-tab-pane",{attrs:{label:"Stack"}},[a("p",[t._v("Stack 实现的是数据结构中的『基于数组实现的栈』。")]),t._v(" "),a("p",[t._v("Stack 诞生于 1.0 时代，它继承自 Vector ，间接实现了 List 接口，但它的核心逻辑还是『栈』。")]),t._v(" "),a("p",[a("strong",[t._v("注意事项")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("『非线性安全的栈』在 Java 集合框架中都是通过使用『"),a("strong",[t._v("双端队列")]),t._v("』来实现功能。")])])]),t._v(" "),a("el-tab-pane",{attrs:{label:"ArrayList"}},[a("p",[t._v("ArrayList 实现的是数据结构领域中的『基于数组实现的线性表』。"),a("small",[t._v("这和 Vector 是一样的。")])]),t._v(" "),a("p",[t._v("ArrayList 诞生于 JDK 1.2 ，实现的是 List 接口。它的底层是通过『"),a("strong",[t._v("动态数组")]),t._v("』实现的。")]),t._v(" "),a("p",[a("strong",[t._v("特征")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("查询效率高、插入、删除效率低，因为需要移动元素；")]),t._v(" "),a("li",[t._v("线程不安全。")]),t._v(" "),a("li",[t._v("允许添加 null 值，且允许添加多个；")]),t._v(" "),a("li",[t._v("未指定初始大小时，默认大小为 0 。 扩容时容量变为原大小的 1.5 倍。批量添加时，如果扩容后仍不够，则按实际需要扩容。")])])]),t._v(" "),a("el-tab-pane",{attrs:{label:"LinkedList"}},[a("p",[t._v("LinkedList 实现的是数据结构领域中的『基于链表实现的线性表』。")]),t._v(" "),a("p",[t._v("LinkedList 和 ArrayList 是 “双胞胎” ，都是诞生于 JDK 1.2，实现类 List 接口。LinkedList 底层使用『"),a("strong",[t._v("双向链表")]),t._v("』实现。")]),t._v(" "),a("p",[a("strong",[t._v("特性")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("插入和删除效率高，查询效率低；顺序访问会非常高效，而随机访问效率"),a("small",[t._v("（比如 get 方法）")]),t._v("比较低；")]),t._v(" "),a("li",[t._v("线程不安全；")]),t._v(" "),a("li",[t._v("允许添加 null 值，且允许添加多个；")]),t._v(" "),a("li",[t._v("LinkedList 不存在扩容问题。")]),t._v(" "),a("li",[t._v("LinkedList 除了实现 List 接口，它还『多』实现了 Deque 接口。")])])]),t._v(" "),a("el-tab-pane",{attrs:{label:"CopyOnWriteArrayList"}},[a("p",[t._v("CopyOnWriteArrayList 实现的是数据结构领域中的『基于数组实现的线性表』。这和 Vector、ArrayList 是一样的。")]),t._v(" "),a("p",[a("strong",[t._v("CopyOnWriteArrayList")]),t._v(" 是诞生于 JDK 1.5 ，实现了List 接口。底层通过『"),a("strong",[t._v("动态数组")]),t._v("』实现，并且提供了不同于 Vector 的线程安全实现：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("写操作"),a("small",[t._v("（add、set、remove 等等）")]),t._v("上锁，并且把原数组拷贝一份出来，然后在新数组进行写操作，操作完后，再将原数组引用指向到新数组。")])]),t._v(" "),a("li",[a("p",[t._v("读操作不加锁，读的时原数组，因此可能读到旧的数据。比如正在执行读操作时，同时有写操作在进行，遇到这种场景时，就会都到旧数据。")])])]),t._v(" "),a("p",[a("strong",[t._v("特性")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("线程安全；")]),t._v(" "),a("li",[t._v("查询效率高；写操作，需要拷贝数组，比较消耗内存和时间；")]),t._v(" "),a("li",[t._v("允许添加 null 值，且允许添加多个；")]),t._v(" "),a("li",[t._v("不能用于实时读的场景，因为读取到数据可能是旧的，可以保证最终一致性"),a("small",[t._v("（不保证实时一致性）")]),t._v("。")])]),t._v(" "),a("el-tag",[t._v("补充")]),t._v(" JDK 1.5 还提供了 "),a("code",[t._v("Collections.synchronizedList(List list)")]),t._v(" 来获得线程安全版的 List 。\n")],1)],1),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"_2-6-arraylist、linkedlist、vector-三者的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-arraylist、linkedlist、vector-三者的区别"}},[t._v("#")]),t._v(" 2.6 ArrayList、LinkedList、Vector 三者的区别")]),t._v(" "),a("p",[t._v("核心区别：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("List 的实现")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("线程安全")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("底层实现")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("扩容系数")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Vector（JDK 1.0）")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("动态数组")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("原大小 x 2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("ArrayList（JDK 1.2）")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("No")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("动态数组")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("原大小 x 1.5")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("LinkedList（JDK 1.2）")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("No")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("双向链表")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("无需扩容")])])])]),t._v(" "),a("h2",{attrs:{id:"_3-map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-map"}},[t._v("#")]),t._v(" 3. Map")]),t._v(" "),a("p",[t._v("Map 体系在 JDK 1.0 的时候就已经存在了，在当时是集合框架的 2 条腿之一"),a("small",[t._v("（另一条腿是 List 体系。这个时候还没有 Set 体系，Set 体系 1.2 才出现）")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Map                    (jdk 1.0)\n|── Hashtable          (jdk 1.0)\n|── TreeMap            (jdk 1.2)\n|── HashMap            (jdk 1.2)\n|   └── LinkedHashMap  (jdk 1.4)\n└── ConcurrentHashMap  (jdk 1.5)\n")])])]),a("p",[t._v("Map 结构是以 key-value 键值对形式存储数据。在数据结构领域，这种结构也被称作『"),a("strong",[t._v("字典")]),a("small",[t._v("（Dictionary）")]),t._v("』。")]),t._v(" "),a("p",[t._v("另外，在数据结构领域，哈希表和哈希集是同一种结构的 2 种不同称呼，所以，在 JDK 里面 HashTable 和 HashMap 这两个单词都被用上了。")]),t._v(" "),a("h3",{attrs:{id:"hashtable、hashmap-和-concurrenthashmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashtable、hashmap-和-concurrenthashmap"}},[t._v("#")]),t._v(" HashTable、HashMap 和 ConcurrentHashMap")]),t._v(" "),a("el-tabs",[a("el-tab-pane",{attrs:{label:"HashTable"}},[a("p",[t._v("Hashtable 对应的是数据结构中的『散列表』结构。"),a("small",[t._v("从直译角度来看，Hashtable 这个单词要比 Hashmap 更地道。")])]),t._v(" "),a("p",[t._v("Hashtable 诞生于 JDK 1.0 ，实现了 Map 接口。底层使用『"),a("strong",[t._v("数组+链表")]),t._v("』实现。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("补充")]),t._v(" "),a("p",[t._v("Hashtable 这种解决 hash 冲突的方式被称为『"),a("strong",[t._v("链地址法")]),t._v("』，也叫拉链法。")])])]),t._v(" "),a("p",[a("strong",[t._v("特性")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("线程安全。")]),t._v(" "),a("li",[t._v("查询、插入、删除效率都高"),a("small",[t._v("（集成了多方特性）")])]),t._v(" "),a("li",[t._v("key 和 value 都不允许为 null。")]),t._v(" "),a("li",[t._v("Hashtable 默认的初始大小为 11 ，之后每次扩充为原来的 2 倍；")]),t._v(" "),a("li",[t._v("除了实现 Map 接口，Hashtable 还继承了 Dictionary 类。"),a("small",[t._v("这是它的兄弟姐妹们所没有的特征。")]),t._v("\n:::")])]),t._v(" "),a("el-tab-pane",{attrs:{label:"Hashmap"}},[a("p",[t._v("Hashmap 对应的是数据结构中的『散列表』结构。")]),t._v(" "),a("p",[t._v("从计算机词汇的翻译上看，hashtable 和 hashmap 是一回事"),a("small",[t._v("（当然底层实现原理不同）。")])]),t._v(" "),a("p",[t._v("HashMap 是诞生于 JDK 1.2，实现了 Map 接口。以前，Hashmap 和 Hashtable 的底层数据结构是一样的，都是『数组+链表』。但是在 JDK 8 中 Hashmap 的底层实现有升级：『数组+链表』or『数组+红黑树』：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("数据量不大的时候，底层使用『数组+链表』；")])]),t._v(" "),a("li",[a("p",[t._v("当数据量增加到一定程度，就变为 数组+红黑树』。"),a("small",[t._v("链表长度 "),a("code",[t._v(">=8")]),t._v(" 时，并且同时数组的长度 "),a("code",[t._v(">=64")])]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/java/img/HashMap.png",alt:"HashMap"}})])]),t._v(" "),a("li",[a("p",[t._v("特性")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("线程不安全。")])]),t._v(" "),a("li",[a("p",[t._v("查询、插入、删除效率都高"),a("small",[t._v("（集成了多方特性）")])])]),t._v(" "),a("li",[a("p",[t._v("允许 null 的键值对；")])]),t._v(" "),a("li",[a("p",[t._v("初始容量是 16，每次扩容都是变为原来大小的 2 倍；")])]),t._v(" "),a("li",[a("p",[t._v("用到了一个编程小技巧：用位运算（&）来代替取模运算（%）")]),t._v(" "),a("p",[t._v("当 b 的值为 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("msup",[a("mn",[t._v("2")]),a("mi",[t._v("n")])],1)],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2^n")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.664392em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.664392em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathrm"},[t._v("2")]),a("span",{staticClass:"vlist"},[a("span",{staticStyle:{top:"-0.363em","margin-right":"0.05em"}},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),a("span",{staticClass:"reset-textstyle scriptstyle uncramped"},[a("span",{staticClass:"mord mathit"},[t._v("n")])])]),a("span",{staticClass:"baseline-fix"},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),t._v("​")])])])])])]),t._v(" 时，"),a("code",[t._v("a % b")]),t._v(" 和 "),a("code",[t._v("a & (b-1)")]),t._v(" 的值相等。这样效率更高，并且可以解决负数问题"),a("small",[t._v("（负数模运算取余，余数应该始终为正数）")]),t._v("。")])])])])])]),t._v(" "),a("el-tab-pane",{attrs:{label:"ConcurrentHashMap"}},[a("p",[t._v("ConcurrentHashMap 对应的是数据结构中的『散列表』。")]),t._v(" "),a("p",[t._v("ConcurrentHashMap 诞生于 JDK 1.5 时代。它实现了 Map 接口。ConcurrentHashMap 和 HashMap 一样，底层使用『"),a("strong",[t._v("数组 + 链表 + 红黑树")]),t._v("』实现。")]),t._v(" "),a("p",[t._v("另外，在 Java 8 版本中，ConcurrentHashMap 有比较大的变动"),a("small",[t._v("（更新升级）")]),t._v("，采用 CAS + Synchronized 实现锁操作，因此，性能上要好于 JDK 1.0 时代的 Hashtable 。")]),t._v(" "),a("p",[a("strong",[t._v("特性")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("线程安全。")]),t._v(" "),a("li",[t._v("查询、插入、删除效率都高"),a("small",[t._v("（集成了多方特性）")])])])])],1),t._v(" "),a("h3",{attrs:{id:"hashmap、hashtable、conccurenthashmap-三者的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap、hashtable、conccurenthashmap-三者的区别"}},[t._v("#")]),t._v(" HashMap、Hashtable、ConccurentHashMap 三者的区别")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("List 的实现")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("历史")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("线程安全")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("底层数据结构")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Hashtable")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("JDK 1.0")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Yes"),a("small",[t._v("（Synchronized 实现）")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("数组 + 链表")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("HashMap")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("JDK 1.2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("No")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("数组 + 链表 + 红黑树")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("ConccurentHashMap")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("JDK 1.5")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Yes"),a("small",[t._v("（CAS + Synchronized 实现）")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("数组 + 链表 + 红黑树")])])])]),t._v(" "),a("p",[t._v("其它小细节：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("List 的实现")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("null-key")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("null-value")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Hashtable")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("不允许")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("不允许")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("HashMap")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("允许")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("允许")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("ConccurentHashMap")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("不允许")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("不允许")])])])]),t._v(" "),a("h3",{attrs:{id:"treemap-和-linkedhashmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treemap-和-linkedhashmap"}},[t._v("#")]),t._v(" TreeMap 和 LinkedHashMap")]),t._v(" "),a("el-tabs",[a("el-tab-pane",{attrs:{label:"TreeMap"}},[a("p",[t._v("TreeMap 对应的是数据结构中的『散列表』。")]),t._v(" "),a("p",[t._v("TreeMap 和 HashMap 一样，也是诞生于 JDK 1.2，实现的是 Map 接口的实现类，底层使用『红黑树』实现。")]),t._v(" "),a("p",[t._v("另外，TreeMap 除了实现了 Map 接口，它还实现了 SotredMap 接口，意味着可以排序，是一个有序的集合，你添加进 TreeMap 中的数据会被它自动排序。")]),t._v(" "),a("p",[a("strong",[t._v("特性")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("线程不安全；")]),t._v(" "),a("li",[t._v("查询、插入、删除效率都比较高。")])])]),t._v(" "),a("el-tab-pane",{attrs:{label:"LinkedHashMap"}},[a("ul",[a("li",[t._v("线程不安全")]),t._v(" "),a("li",[t._v("底层使用『数组 + 链表 + 红黑树』实现")])]),t._v(" "),a("p",[t._v("LinkedHashMap 并不是在关键节点添加进集合框架的，它是在 JDK 1.4 的时候添加进集合框架的。"),a("small",[t._v("看起来像个补丁。")])]),t._v(" "),a("p",[t._v("LinkedHashMap 继承自 HashMap ，它在 HashMap 的基础上用链表额外去『串』起了所有的节点，这样就能记录下添加到 LinkeHashMap 中的数据的添加顺序，从而保证了迭代顺序和添加顺序的一致。")])])],1),t._v(" "),a("h3",{attrs:{id:"hashmap-与-treemap-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-与-treemap-的区别"}},[t._v("#")]),t._v(" HashMap 与 TreeMap 的区别")]),t._v(" "),a("p",[t._v("关键性区别：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Map 的实现")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("线程安全")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("底层实现")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("HashMap  （JDK 1.2）")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("No")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("数组 + 链表 + 红黑树，无序")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("TreeMap  （JDK 1.2）")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("No")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("红黑树，有序")])])])]),t._v(" "),a("p",[t._v("其它小区别：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Map 的实现")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("null-key")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("null-val")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("默认初始容量")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("扩容系数")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("HashMap  （JDK 1.2）")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("允许")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("允许")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("16")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("x2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("TreeMap  （JDK 1.2）")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("不允许")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("不允许")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("无")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("无")])])])]),t._v(" "),a("p",[t._v("另外，相较而言，Hashmap 效率略高，Treemap 效率略低。")]),t._v(" "),a("p",[t._v("其实从使用思路上看，它们两个侧重点完全不同：HashMap 的侧重点是 "),a("code",[t._v("hash")]),t._v(" ，虽然在 1.8 中用到了红黑树，但是本质上是对 1.8 以前的链表方案的升级而已"),a("small",[t._v("（实际上，并非非用树不可）")]),t._v("；而 TreeMap 的侧重点就是 "),a("code",[t._v("tree")]),t._v("，可以想象，即便底层不是使用的红黑树，其作者也会使用其它树结构"),a("small",[t._v("（例如 AVL 树）")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"_4-set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-set"}},[t._v("#")]),t._v(" 4. Set")]),t._v(" "),a("p",[t._v("整个 Set 体系是在第二波"),a("small",[t._v("（JDK 1.2）")]),t._v("才被添加进集合框架中的，看起来，它好似 List 的兄弟，但是实际上，它出现地要比 List"),a("small",[t._v("（和 Map）")]),t._v("晚。")]),t._v(" "),a("p",[t._v("由于在集合框架的第一波"),a("small",[t._v("（JDK 1.0）")]),t._v("中并没有 Set 体系，因此 Set 体系在线程安全的实现上，就没有想 List 和 Map 一样『走弯路』：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("JDK 1.2 中引入是 Set 的线程不安全实现；")])]),t._v(" "),a("li",[a("p",[t._v("在 JDK 1.5"),a("small",[t._v("（J.U.C）")]),t._v("中引入的是 Set 的线程安全实现。")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Set                     (jdk 1.2)\n|── TreeSet             (jdk 1.2)\n|── HashSet             (jdk 1.2)\n|   └── LinkedHashSet   (jdk 1.4)\n└── CopyOnWriteArraySet (jdk 1.5)\n")])])]),a("p",[t._v("一个既有意思又重要的现象：虽然 Set 看起来和 List 更亲"),a("small",[t._v("（都是 Collection 接口的子接口）")]),t._v("，但是 Set 的各种实现类底层却是『"),a("strong",[t._v("利用 Map")]),t._v("』实现的自己的功能。")]),t._v(" "),a("h3",{attrs:{id:"hashset-、treeset-和-linkedhashset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashset-、treeset-和-linkedhashset"}},[t._v("#")]),t._v(" HashSet 、TreeSet 和 LinkedHashSet")]),t._v(" "),a("el-tabs",[a("el-tab-pane",{attrs:{label:"HashSet"}},[a("ul",[a("li",[t._v("线程不安全")]),t._v(" "),a("li",[t._v("底层用 HashMap 实现。根本结构是数组+链表+红黑树。")])]),t._v(" "),a("p",[t._v("HashSet 是用来存储没有重复元素的集合类，并且是无序的。"),a("small",[t._v("或者说，你可以添加重复元素，但是从第二次添加开始，你加了也白加。")])]),t._v(" "),a("p",[t._v("由于 HashSet 底层利用的是 HashMap 实现，因此你添加到 HashSet 中的值，都被它添加到一个 HashMap 中作了 key：")]),t._v(" "),a("ul",[a("li",[t._v("由于 HashMap 的 key 不能重复，所以 HashSet 中的值自然也就是不能重复的；")]),t._v(" "),a("li",[t._v("由于 HashMap 允许 null-key，所以 HashSet 中也可以添加一个 null 。")])]),t._v(" "),a("p",[a("strong",[t._v("使用场景")]),t._v("：去重、不要求顺序")])]),t._v(" "),a("el-tab-pane",{attrs:{label:"TreeSet"}},[a("ul",[a("li",[t._v("线程不安全")]),t._v(" "),a("li",[t._v("底层使用 TreeMap 实现，因此根本结构是『红黑树』。")])]),t._v(" "),a("p",[t._v("TreeSet 除了实现 Set 接口，它还实现了 SortedSet 接口，意味着可以排序，它是一个有序并且没有重复的集合类。"),a("small",[t._v("TreeMap 是有序的，因此 TreeSet 自然也就是有序的。")])]),t._v(" "),a("p",[t._v("由于 TreeSet 底层利用的是 TreeMap 实现，因此你添加到 TreeSet 中的值，都被它添加到一个 TreeMap 中作了 key：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("TreeMap 是内部有序的，TreeSet 自然也就是内部有序的；")])]),t._v(" "),a("li",[a("p",[t._v("TreeMap 不允许添加 null-key，TreeSet 自然也就不允许添加 null 值。")])])]),t._v(" "),a("p",[t._v("TreeSet 支持两种排序方式：自然排序"),a("small",[t._v("（默认）")]),t._v("和自定义排序。")]),t._v(" "),a("p",[a("strong",[t._v("使用场景")]),t._v("：去重、要求排序")])]),t._v(" "),a("el-tab-pane",{attrs:{label:"LinkedHashSet"}},[a("ul",[a("li",[t._v("线程不安全")]),t._v(" "),a("li",[t._v("HashSet 的子类，底层利用了 LinkedHashMap，因此根本结构是『数组+链表+红黑树』。")])]),t._v(" "),a("p",[t._v("由于 LinkedHashSet 底层利用了 LinkedHashMap，因此：")]),t._v(" "),a("ul",[a("li",[t._v("LinkedHashMap 是 JDK 1.4 中出现的；LinkedHashSet 自然也是 JDK 1.4 才出现的；")]),t._v(" "),a("li",[t._v("LinkedHashMap 能记录元素的添加次序，LinkedHashSet 自然也就能记录元素的添加次序。")])]),t._v(" "),a("p",[a("strong",[t._v("使用场景")]),t._v("：去重、需要保证插入或者访问顺序")])])],1),t._v(" "),a("h3",{attrs:{id:"hashset、treeset、linkedhashset-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashset、treeset、linkedhashset-的区别"}},[t._v("#")]),t._v(" HashSet、TreeSet、LinkedHashSet 的区别")]),t._v(" "),a("p",[a("strong",[t._v("历史发展层面")]),t._v("：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Set 的实现")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("诞生")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("HashSet")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("JDK 1.2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("TreeSet")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("JDK 1.2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("LinkedHashSet")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("JDK 1.4")])])])]),t._v(" "),a("p",[a("strong",[t._v("线程安全层面")]),t._v("：他们三个都是线程不安全的。")]),t._v(" "),a("p",[t._v("底层数据结构：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Set 的实现")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("底层实现")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("HashSet")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("利用了 HashMap，去重")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("TreeSet")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("利用了 TreeMap，去重 + 内部有序")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("LinkedHashSet")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("利用了 LinkedHashMap，去重 + 外部有序")])])])]),t._v(" "),a("h3",{attrs:{id:"copyonwritearrayset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copyonwritearrayset"}},[t._v("#")]),t._v(" CopyOnWriteArraySet")]),t._v(" "),a("ul",[a("li",[t._v("线程安全")]),t._v(" "),a("li",[t._v("底层利用的是 CopyOnWriteArrayList")])]),t._v(" "),a("p",[t._v("CopyOnWriteArraySet 是 JDK 1.5"),a("small",[t._v("（J.U.C）")]),t._v("引入的 Set 接口的线程安全实现。")]),t._v(" "),a("p",[a("strong",[t._v("特征")]),t._v("：线程安全读多写少，比如缓存不能存储重复元素。")]),t._v(" "),a("h2",{attrs:{id:"_5-queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-queue"}},[t._v("#")]),t._v(" 5. Queue")]),t._v(" "),a("p",[t._v("Queue 体系比较『新』。"),a("strong",[t._v("Queue")]),t._v(" 接口在 JDK 1.5 才引入到 JDK 集合框架体系，它的子接口 "),a("strong",[t._v("Deque")]),t._v(" 接口在 JDK 1.6 的时候才补充进 JDK 。")]),t._v(" "),a("p",[t._v("Deque 继承自 Queue ，是一个既可以在头部操作元素，又可以为尾部操作元素，俗称为双端队列。")]),t._v(" "),a("blockquote",[a("p",[t._v("在数据结构领域，Queue 是一个先入先出"),a("small",[t._v("（FIFO）")]),t._v("的集合。")])]),t._v(" "),a("p",[t._v("在集合框架中它分为 3 大类：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("非阻塞队列：普通队列"),a("small",[t._v("（Queue、Deque）")])])]),t._v(" "),a("li",[a("p",[t._v("阻塞队列"),a("small",[t._v("（BlockingQueue）")])])]),t._v(" "),a("li",[a("p",[t._v("其它队列：主要是优先级队列 "),a("small",[t._v("（PriorityQueue、PriorityBlockingQueue）")])])])]),t._v(" "),a("h3",{attrs:{id:"非阻塞队列-普通队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞队列-普通队列"}},[t._v("#")]),t._v(" 非阻塞队列"),a("small",[t._v("（普通队列）")])]),t._v(" "),a("p",[t._v("非阻塞队列"),a("small",[t._v("（普通队列）")]),t._v("主要指的是 Queue 接口"),a("small",[t._v("（JDK 1.5）")]),t._v("和 Deque 接口"),a("small",[t._v("（JDK 1.6）")]),t._v("的直接实现类。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Collection\n└── Queue\n    |── ConcurrentLinkedQueue       基于链表，线程安全\n    └── Deque \n        |── ArrayDeque              基于动态数组，线程不安全\n        |── LinkedList              基于链表，线程不安全\n        └── ConcurrentLinkedDeque   基于链表，线程安全\n")])])]),a("p",[a("strong",[t._v("Queue 接口定义"),a("small",[t._v("（引入）")]),t._v("的方法包括：")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}}),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Throws exception")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Returns special value")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Insert")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("add(e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("offer(e)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Remove")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("remove()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("poll()")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Examine")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("element()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("peek()")])])])]),t._v(" "),a("p",[a("strong",[t._v("Deque 接口定义"),a("small",[t._v("（引入）")]),t._v("的方法包括：")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}}),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Throws exception")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Special value")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Throws exception")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Special value")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Insert")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("addFirst(e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("offerFirst(e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("addLast(e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("offerLast(e)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Remove")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("removeFirst()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("pollFirst()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("removeLast()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("pollLast()")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Examine")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("getFirst()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("peekFirst()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("getLast()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("peekLast()")])])])]),t._v(" "),a("p",[t._v("在引入 Deque 接口之后，JDK 很是器重它，一方面 Deque 的功能涵盖了 Queue 的功能，另一方面，数据结构中的『栈』和『队列』都可以通过 Deque 统一实现。")]),t._v(" "),a("p",[a("strong",[t._v("Queue VS Deque：")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Queue Method")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Equivalent Deque Method")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("add(e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("addLast(e)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("offer(e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("offerLast(e)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("remove()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("removeFirst()")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("poll()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("pollFirst()")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("element()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("getFirst()")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("peek()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("peekFirst()")])])])]),t._v(" "),a("p",[a("strong",[t._v("Stack VS Deque：")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Stack Method")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Equivalent Deque Method")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("push(e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("addFirst(e)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("pop()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("removeFirst()")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("peek()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("peekFirst()")])])])]),t._v(" "),a("h3",{attrs:{id:"阻塞队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阻塞队列"}},[t._v("#")]),t._v(" 阻塞队列")]),t._v(" "),a("p",[t._v("阻塞队列在队列功能的基础上提供了『阻塞当前线程』的能力：在空队列获取元素时、或者在已存满队列存储元素时，都会被阻塞当前线程。"),a("strong",[t._v("阻塞队列全部都是线程安全的。")])]),t._v(" "),a("p",[a("strong",[t._v("阻塞队列体系")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Collection\n└── Queue\n    |── BlockingQueue \n    |   |── LinkedBlockingQueue     基于链表\n    |   |── ArrayBlockingQueue      基于动态数组\n    |   └── SynchronousQueue        基于 CAS 的阻塞队列。                     |\n    └── Deque\n        └── BlockingDeque\n            └── LinkedBlockingDeque 基于链表，双端队列\n")])])]),a("p",[t._v("BlockingQueue 接口引入了一套新的 API，它和 Queue 的那套 API 是独立的，互不影响，不要调用错了。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}}),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Throws exception")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Special value")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Blocks")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Times out")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Insert")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("add(e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("offer(e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("put(e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("offer(e, time, unit)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Remove")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("remove()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("poll()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("take()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("poll(time, unit)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Examine")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("element()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("peek()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("not applicable")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("not applicable")])])])]),t._v(" "),a("h3",{attrs:{id:"其它队列-优先级队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其它队列-优先级队列"}},[t._v("#")]),t._v(" 其它队列（优先级队列）")]),t._v(" "),a("p",[t._v("PriorityQueue 是基于最小二叉堆实现的数据结构。内部以自然顺序排序。")]),t._v(" "),a("p",[t._v("常见的 PriorityQueue 是线程非安全的，PriorityBlockingQueue 是线程安全的。它俩底层数据结构是一样的。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Collection\n└── Queue\n    |── PriorityQueue\n    └── BlockingQueue\n        └── PriorityBlockingQueue\n")])])]),a("h2",{attrs:{id:"_6-集合框架的线程安全问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-集合框架的线程安全问题"}},[t._v("#")]),t._v(" 6. 集合框架的线程安全问题")]),t._v(" "),a("blockquote",[a("p",[t._v("很多复杂/混乱的问题从历史的角度来看会非常的清晰。")])]),t._v(" "),a("p",[t._v("集合的线程安全问题指的是如果两个线程同时操作同一个集合对象出现 ConcurrentModificationException 异常的情况。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("接口")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("1.0")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("1.1")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("1.2")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("List")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Vector")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Map")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Hashtable")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Set")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("无")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})])])]),t._v(" "),a("h3",{attrs:{id:"jdk-1-0-时代的集合类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk-1-0-时代的集合类"}},[t._v("#")]),t._v(" JDK 1.0 时代的集合类")]),t._v(" "),a("p",[t._v("JDK 1.0 时代『一步到位』地将各种集合都是现成了线程安全版。所以，这个时代出现的 Vector"),a("small",[t._v("（List 接口的实现）")]),t._v("、Hashtable（Map 接口的实现）都是线程安全的。")]),t._v(" "),a("p",[t._v("这里需要注意的是 Set 接口"),a("small",[t._v("（及其实现类）")]),t._v("是从 1.2 版本开始才出现的，1.2 之前并没有。")]),t._v(" "),a("h3",{attrs:{id:"jdk-1-2-时代的集合类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk-1-2-时代的集合类"}},[t._v("#")]),t._v(" JDK 1.2 时代的集合类")]),t._v(" "),a("p",[t._v("线程安全的代价就是降低了性能。『线程安全』和『高性能』没有哪个是标准答案，它们应该是 "),a("code",[t._v("Plan A")]),t._v(" 和 "),a("code",[t._v("Plan B")]),t._v(" 的关系，选哪个决定权应该在使用者的手里。")]),t._v(" "),a("p",[t._v("如果说，1.0 提供的是 Plan A ，那么 1.2 提出的就是 Plan B 。简单来说，1.0 的 List 和 Map 接口的实现类都是线程安全的；1.2 的 List 和 Map 接口的实现类都是非线程安全的。")]),t._v(" "),a("h3",{attrs:{id:"jdk-1-2-时代的集合类的其它改动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk-1-2-时代的集合类的其它改动"}},[t._v("#")]),t._v(" JDK 1.2 时代的集合类的其它改动")]),t._v(" "),a("p",[t._v("除了提供 List 和 Map 的 "),a("code",[t._v("Plan B")]),t._v(" 之外，1.2 时代还有一个比较大的升级：出现了 Set 接口"),a("small",[t._v("（及其实现类）")]),t._v("。")]),t._v(" "),a("p",[t._v("Set 体系一出现就是 "),a("code",[t._v("Plan B")]),t._v(" 版本，因此，常见的实现类 HashSet 和 TreeSet 都是非线程安全的。")]),t._v(" "),a("p",[t._v("另外，JDK 1.2 除了提出了非线性安全版的实现外，对线性安全版的实现还做出了『补充』：JDK 1.2 中提供的集合工具类 Collections ，有如下的一批方法：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("synchronizedCollection")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("synchronizedList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("synchronizedSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("synchronizedMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这些方法接受非线程安全的 List、Set、Map 对象，返回与之对应的线程安全版的 List、Set、Map 对象。为了避免命名带来的记忆负担，官方还很贴心地将这些线程安全版地实现类写成了内部类的形式，你只需要以面向接口编程的思想去使用它们就行，而不必在意它们的名字叫什么"),a("small",[t._v("（当然，看源码还是能看到的）")]),t._v("。")]),t._v(" "),a("p",[t._v("所以，如果你需要线性安全的 List 和 Map，除了，使用 JDK 1.0 版中的哪些实现外，还可以用上面的方式获得它们。")]),t._v(" "),a("h3",{attrs:{id:"jdk-1-2-的未尽工作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk-1-2-的未尽工作"}},[t._v("#")]),t._v(" JDK 1.2 的未尽工作")]),t._v(" "),a("p",[t._v("JDK 1.2 在 JDK 1.0 / 1.1 的基础上完善、更新了 Collection 和 Map 体系下的接口和实现类。但是它的工作并未完全结束。体现在两个方面：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("截止到 1.2，集合体系主要体现在 List、Set 和 Map 的功能，但是对于数据结构领域中的其它结构，它的功能并不丰富。例如常见的队列（Queue）结构就没有。")])]),t._v(" "),a("li",[a("p",[t._v("截止到 1.2，了解决集合的线程安全问题的方案简单粗暴"),a("small",[t._v("（提供的同步集合类，不允许同时存在多个线程操作同一个集合对象）")]),t._v("。而有些场景下需要在多线程同时访问同一个线程对象时还要保证线程安全性（这个要求就很高了）。")])])]),t._v(" "),a("p",[t._v("在 JDK 1.2 之后的 JDK 版本中陆陆续续还有对集合框架体系的内容进行修补完善，直到 JDK 1.5 中提出了 J.U.C，它里面包含了提供并发能力的集合实现类，至此 JDK 中的集合框架算是基本完善成型，再有的工作就是零零碎碎的小修补、小完善了。")]),t._v(" "),a("p",[t._v("不过，不像 JDK 1.2 这样对集合框架整体进行更新，后续版本中对于集合框架的修补完善不再是版本更新的核心功能，因此这些修改并非各个版本升级时的宣传重点，直到 JDK 1.5 的 J.U.C 中又作为 feature 宣传了一下。")]),t._v(" "),a("h3",{attrs:{id:"queue-和-stack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queue-和-stack"}},[t._v("#")]),t._v(" Queue 和 Stack")]),t._v(" "),a("p",[t._v("同样是作为常见的 2 中特殊的线性表结构， Queue 和 Stack 的命运在 JDK 中十分不同。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Stack 是类，继承自 Vector 类，是 List/Collection 接口的间接实现类，它是 JDK 1.0 出现的最早的一批成员。")])]),t._v(" "),a("li",[a("p",[t._v("Queue 是接口，直接继承自 Collection 接口，在 JDK 1.5 才出现！而它的一个子接口 Deque"),a("small",[t._v("（双端队列）")]),t._v("到 JKD 1.6 时才出现。")])])]),t._v(" "),a("p",[t._v("Deque 的接口的常用实现类有两个：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("ArrayDeque，底层使用数组实现 Deque 接口要求的方法；")])]),t._v(" "),a("li",[a("p",[t._v("LinkedList，底层使用链表实现 Deque 接口要求的方法。注意，从名字上看，你很容易忽视掉它。")])])]),t._v(" "),a("p",[t._v("它们都是非线程安全的。")]),t._v(" "),a("p",[t._v("这里有两个小问题：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("JDK 没有直接提供 Stack 的非线性安全版本。在它的代码注释中，官方建议使用 Deque 接口的实现类来当作 statck 使用。")])]),t._v(" "),a("li",[a("p",[t._v("Collections 工具类中并没有直接的 "),a("code",[t._v(".synchronizedDeque()")]),t._v(" 方法，这就导致没有直接的便捷的方式获得线程安全版的队列和栈对象。")])])]),t._v(" "),a("p",[t._v("因此对栈和队列的使用还是要比 List、Set 和 Map 要麻烦一点。不过，不排除后续的 JDK 升级中会完善改进这两个问题。")])],1)}),[],!1,null,null,null);e.default=v.exports}}]);