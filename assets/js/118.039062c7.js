(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{591:function(e,t,a){"use strict";a.r(t);var s=a(62),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"_1-分支变基-git-rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-分支变基-git-rebase"}},[e._v("#")]),e._v(" 1. 分支变基（Git Rebase）")]),e._v(" "),a("p",[e._v("git rebase 能实现和 git merge 同样的功能，它可以以另一种方式来实现 “分支合并” 的效果。")]),e._v(" "),a("h3",{attrs:{id:"merge-和-rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge-和-rebase"}},[e._v("#")]),e._v(" merge 和 rebase")]),e._v(" "),a("p",[e._v("假设我们有两个分支"),a("small",[e._v("（master 和 feature）")]),e._v("。feature 是基于 master 的 C1 节点建立的分支，然后开发人员分别在两个分支各自开发：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/git-rebase-1.png",alt:"git-rebase-1"}})]),e._v(" "),a("p",[e._v("一个人在 C1 版本基础上开发出了 C2 版本；另一个人在 C1 基础上开发出了 C3 版本。")]),e._v(" "),a("h4",{attrs:{id:"merge-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge-命令"}},[e._v("#")]),e._v(" merge 命令")]),e._v(" "),a("p",[e._v("现在我们想要把 feature 分支开发的内容合并到 master，使用 merge 命令：")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout master\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" merge feature\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("复习")]),e._v(" "),a("p",[e._v("merge 命令的使用是 “站在 master 分支” 的角度上来看，将 feature 分支的内容 “纳入” 到 master 分支。master 分支会演进出一个新的版本。")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/git-rebase-2.png",alt:"git-rebase-2"}})]),e._v(" "),a("p",[e._v("从整体来看，merge 命令执行之后，会在之前的相关的 3 个版本节点之外生成一个新的节点 "),a("small",[e._v("这个新节点将会是 master 线路上的最新的 “终点” ")]),e._v("。")]),e._v(" "),a("h4",{attrs:{id:"rebase-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rebase-命令"}},[e._v("#")]),e._v(" rebase 命令")]),e._v(" "),a("p",[e._v("对于同样的初始情况，如果我们使用 rebase 命令会有什么不同。")]),e._v(" "),a("p",[e._v("git rebase 的正确使用方式和 git merge 有一点是完全相反的：")]),e._v(" "),a("ul",[a("li",[e._v("使用 git merge 时，你是站在 A 分支，考虑把 B 分支 “合并进来”；")]),e._v(" "),a("li",[e._v("使用 git rebase 时，你是站在 B 分支，考虑把 B 分支的 “基” 变成 A 的某个节点"),a("small",[e._v("（通常是端点，即，最新的节点）")]),e._v("。")])]),e._v(" "),a("p",[e._v("你要执行的命令如下"),a("small",[e._v("（再次强调，你是站在 feature 分支上）")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout feature\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" rebase master\n")])])]),a("p",[e._v("在 GitKraken 中等价的操作如下：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/git-rebase-3.gif",alt:"git-rebase-3"}})]),e._v(" "),a("p",[e._v("执行 git rebase 的前后差异如下：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/git-rebase-4.png",alt:"git-rebase-4"}})]),e._v(" "),a("h3",{attrs:{id:"后续操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后续操作"}},[e._v("#")]),e._v(" 后续操作")]),e._v(" "),a("p",[e._v("虽然经过 "),a("strong",[e._v("git rebase")]),e._v(" ，feature 分支上已经含有了 master 分支和自己的所有的变更，但是通常这些代码最终是要合并到 master 分支上的，即，逻辑上 git rebase 并非一系列操作的 “终点” ，而是 “中点” 。")]),e._v(" "),a("p",[e._v("所以，最后我们还要回到 master 分支上，执行一次 git merge 操作，将 feature 分支合并进 master 分支。"),a("small",[e._v("（再啰嗦一边，合并的时候，你是站在 A 分支，把 B 分支合进来、合进来、合进来。什么叫合进来？）")])]),e._v(" "),a("p",[e._v("整个流程的总而言之一句话："),a("code",[e._v("feature rebase on master，master merge feature")]),e._v(" 。")]),e._v(" "),a("h2",{attrs:{id:"_2-关于压缩提交-git-rebase-i"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-关于压缩提交-git-rebase-i"}},[e._v("#")]),e._v(" 2. 关于压缩提交（git rebase -i）")]),e._v(" "),a("p",[e._v("git rebase 名了除了用于 “另一种” 的合并之外，还有一种常见用途就是用来压缩提交记录。“学名” 叫交互式变基础（Interactive Rebase）。")]),e._v(" "),a("p",[e._v("效果看起来挺明显、挺直观的：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/git-rebase-8.gif",alt:"git-rebase-8"}})]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("有这种使用场景也很常见：有时你以为你的有一次提交完成了所有工作，但是最后的结果却是你随后陆陆续续还要再补充几次提交才算是完成了原计划的一项任务。")]),e._v(" "),a("p",[e._v("这种情况下，你在 Git 的提交记录中将留下多个历史版本。而实际上，这多个版本并无存在的必要，逻辑上，只需要有一个就行了。")]),e._v(" "),a("p",[e._v("理想情况下，你可以用 "),a("strong",[e._v("git rebase -i")]),e._v(" 命令把多个 Commit 压缩成一个。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git rebase -i HEAD~<N>\n")])])]),a("p",[e._v("例如，如果你想要压缩最后两个 Commit：")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" rebase -i HEAD~3\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[e._v("注意")]),e._v(" "),a("p",[e._v("这里有 "),a("code",[e._v("[HEAD, HEAD~3)")]),e._v(" 左开右闭的含义，因此，合并最后 "),a("code",[e._v("2")]),e._v(" 个 Commit，出现的数字是 "),a("code",[e._v("3")]),e._v(" 而不是 "),a("code",[e._v("2")]),e._v(" 。")])]),e._v(" "),a("p",[e._v("当你执行完这个命令后，合并工作并没完，你看到的是一个交互式"),a("small",[e._v("（interactive ）")]),e._v("界面，例如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('pick 16a9a47 update3 \npick a7186d8 update2\npick 7b16b28 update1\n\n Rebase a9269a3..7b16b28 onto a9269a3 (3 commands)\n\n Commands:\n p, pick = use commit\n r, reword = use commit, but edit the commit message\n e, edit = use commit, but stop for amending\n s, squash = use commit, but meld into previous commit\n f, fixup = like "squash", but discard this commit\'s log message\n x, exec = run command (the rest of the line) using shell\n d, drop = remove commit\n\n...\n')])])]),a("p",[e._v("在这里，Git 需要我们手动对这 3 个 Commit 进行设置。我们需要关注的状态是 "),a("code",[e._v("Squash")]),e._v(" 和 "),a("code",[e._v("Reword")]),e._v(" 。我们要将这 3 个 Commit 调整成如下状态：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("squash 16a9a47 update3 \nsquash a7186d8 update2\nreword 7b16b28 update1\n")])])]),a("p",[e._v("这样，最近的 2 次 Commit（HEAD、HEAD~1）将合并到 HEAD~2 中，并且它们两个的 message 将会被合并到 HEAD~2 的 message 中。")]),e._v(" "),a("p",[e._v("在 GitKraken 中，它们是这个样子：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/git-rebase-9.png",alt:"git-rebase-9"}})])])}),[],!1,null,null,null);t.default=r.exports}}]);