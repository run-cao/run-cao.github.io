(window.webpackJsonp=window.webpackJsonp||[]).push([[312],{784:function(s,a,t){"use strict";t.r(a);var v=t(62),_=Object(v.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"mysql-一棵-b-树能存多少条数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql-一棵-b-树能存多少条数据"}},[s._v("#")]),s._v(" MySQL 一棵 B+ 树能存多少条数据")]),s._v(" "),t("h2",{attrs:{id:"页的大小"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#页的大小"}},[s._v("#")]),s._v(" 页的大小")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("在磁盘层面，操作的最小单位是 “"),t("strong",[s._v("扇区")]),s._v("” ，一个扇区的大小是 512个字节")])]),s._v(" "),t("li",[t("p",[s._v("在操作系统"),t("small",[s._v("（的文件系统）")]),s._v("层面，操作的最小单位是 “"),t("strong",[s._v("块")]),s._v("” ，一个块的大小是 4 k，也就是 8 个扇区大小。")])]),s._v(" "),t("li",[t("p",[s._v("在 MySQL"),t("small",[s._v("（的 InnoDB 引擎）")]),s._v("层面，操作的最小单位是 “"),t("strong",[s._v("页")]),s._v("” ，一个页的大小是 16 k，也就是 4 个块大小。")])])]),s._v(" "),t("p",[s._v("三者的大小比例是 1:4:8 。")]),s._v(" "),t("p",[s._v("在 MySQL 中，你可以通过下述命令查看到 InnoDB 引擎的 page 大小：")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" variables "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'innodb_page_size'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("你可以很明显看到是 16384 字节。它等于 "),t("code",[s._v("1 x 4 x 8 x 512")]),s._v(" 字节。")]),s._v(" "),t("p",[s._v("假设在 MySQL 的表中，每一条数据占 1k 大小，那么在 InnoDB 引擎中，没一页中就会有 16 条数据。")]),s._v(" "),t("p",[s._v("这也就意味着，在上述假设下，即便你是通过 id 这样有唯一性的条件在 “查询一条” 数据，但是实际上，MySQL 从磁盘上读出来的总是 16 条数据，然后，在内存中进行筛选、过滤，返回 “那一条” 数据给你。")]),s._v(" "),t("h2",{attrs:{id:"页的数量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#页的数量"}},[s._v("#")]),s._v(" 页的数量")]),s._v(" "),t("p",[s._v("因为 MySQL 是根据 B+ 树建立的索引，因此，一个 MySQL 的表中能存储多少条数据取决于叶子节点的数量，与非叶子节点"),t("small",[s._v("（根节点和中间节点）")]),s._v("无关。")]),s._v(" "),t("p",[s._v("假设主键 ID 为 bigint 类型，长度为 8 字节，而指针大小在 InnoDB 源码中设置为 6 字节，这样一共 14 字节。也就是说，由 bigint 和磁盘地址所组成的键值对占 14 字节的空间。")]),s._v(" "),t("h3",{attrs:{id:"假设-b-树的深度为-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#假设-b-树的深度为-2"}},[s._v("#")]),s._v(" 假设 B+ 树的深度为 2")]),s._v(" "),t("p",[s._v("因为 B+ 树的深度为 2 ，那么意味着其它节点都是叶子页。那么，根节点中能记录的叶子节有："),t("code",[s._v("16384 / 14 = 1170")]),s._v(" 个。即，最多可以有 "),t("code",[s._v("1170")]),s._v(" 个 Page 来存储数据。")]),s._v(" "),t("p",[s._v("而假设表中的每条数据占 1k 大小，上面计算过，每 1 个 Page 中可以有 16 条数据，那么 1170 个页中，总共最多可以有 "),t("code",[s._v("1170 x 16 = 18720")]),s._v(" 条数据，大约 18 万条"),t("small",[s._v("（ 不到 19 万条 ）")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"假设-b-树的深度为-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#假设-b-树的深度为-3"}},[s._v("#")]),s._v(" 假设 B+ 树的深度为 3")]),s._v(" "),t("p",[s._v("因为 B+ 树的深度为 3 ，那么意味着它的第二层都是中间节点。那么，根节点中能记录的中间节点有："),t("code",[s._v("16384 / 14 = 1170")]),s._v(" 个。同样，每个根节点中记录的叶子节点又有 "),t("code",[s._v("1170")]),s._v(" 个，那么深度为 3 的 B+ 树总共会有 "),t("code",[s._v("1170 x 1170 = 1368900")]),s._v(" 个叶子节点。")]),s._v(" "),t("p",[s._v("而假设表中的每条数据占 1k 大小，上面计算过，每 1 个 Page 中可以有 16 条数据，那么 1368900 个页中，总共最多可以有 "),t("code",[s._v("1368900 x 16 = 21902400")]),s._v(" 条数据，大约 2100 万条"),t("small",[s._v("（ 不到 2200 万条 ）")]),s._v("。")]),s._v(" "),t("p",[s._v("这也是通常所说的，MySQL 单表数据量到千万是个 “坎” 的原因。因为再多，B+ 树的层次会再多加一层，这就意味着查询操作的时间会增加。")]),s._v(" "),t("p",[s._v("另外，上述的数据量都是基于，每条数据占 1k 大小的假设算出来的，如果单条数据占用空间更大或更小，那么上述算出来的结果就会有波动。")]),s._v(" "),t("h3",{attrs:{id:"行数据有多长"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#行数据有多长"}},[s._v("#")]),s._v(" 行数据有多长")]),s._v(" "),t("p",[s._v("上述的例子中，我们始终假设表的每 1 行数据长度为 1k ，而在 MySQL 可以通过如下命令查询到表的行数据平均长度：")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("status")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'employee'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("上述 SQL 在查询 "),t("code",[s._v("emloyee")]),s._v(" 表的相关信息，其中，有一项为 "),t("code",[s._v("Avg_row_length")]),s._v(" ，它的值就是 employee 表的行数据平均长度。")])])}),[],!1,null,null,null);a.default=_.exports}}]);