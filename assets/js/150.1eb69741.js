(window.webpackJsonp=window.webpackJsonp||[]).push([[150],{622:function(t,e,l){"use strict";l.r(e);var a=l(62),v=Object(a.a)({},(function(){var t=this,e=t.$createElement,l=t._self._c||e;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("h1",{attrs:{id:"使用-thread-类创建线程"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#使用-thread-类创建线程"}},[t._v("#")]),t._v(" 使用 Thread 类创建线程")]),t._v(" "),l("p",[t._v("Java 提供了 java.lang.Thread 类支持多线程编程，该类提供了大量的方法来控制和操作线程。")]),t._v(" "),l("table",[l("thead",[l("tr",[l("th",{staticStyle:{"text-align":"left"}},[t._v("#")]),t._v(" "),l("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),l("tbody",[l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("run 方法")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("直接调用线程的执行函数")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("start 方法")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("启动线程")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("sleep 方法")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("让线程休眠"),l("small",[t._v("（即让出 CPU）")]),t._v("指定 "),l("strong",[t._v("毫秒")]),t._v(" 数")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("getName 方法")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("返回该线程的名称")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("getPriority 方法")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("返回线程的优先级")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("setPriority 方法")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("更改线程的优先级")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("getState 方法")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("返回该线程的状态")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("isAlive 方法")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("测试线程是否处于活动状态")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("join 方法")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("等待该线程终止")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("interrupt 方法")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("中断线程")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("yield 方法")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("暂停正在执行的线程，并执行其他线程")])])])]),t._v(" "),l("p",[t._v("使用继承 Thread 类的方式创建线程的实现步骤如下：")]),t._v(" "),l("ol",[l("li",[l("p",[t._v("定义一个类去继承 Thread 类，重写 "),l("strong",[t._v("Thread#run")]),t._v(" 方法，在 "),l("strong",[t._v("Thread#run")]),t._v(" 方法中实现代码逻辑；")])]),t._v(" "),l("li",[l("p",[t._v("创建线程对象;")])]),t._v(" "),l("li",[l("p",[t._v("调用 "),l("strong",[t._v("Thread#start")]),t._v(" 方法启动线程。")])])])])}),[],!1,null,null,null);e.default=v.exports}}]);