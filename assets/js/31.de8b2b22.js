(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{505:function(e,s,t){"use strict";t.r(s);var a=t(62),n=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"默认配置文件内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#默认配置文件内容"}},[e._v("#")]),e._v(" 默认配置文件内容")]),e._v(" "),t("h2",{attrs:{id:"_1-两种配置映射的风格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-两种配置映射的风格"}},[e._v("#")]),e._v(" 1. 两种配置映射的风格")]),e._v(" "),t("p",[e._v("docker 中映射配置文件的方式有 2 种。其实，本质上也就是 1 种，不过是 2 种编写风格。")]),e._v(" "),t("ul",[t("li",[t("p",[t("strong",[e._v("方式一：")]),e._v(" 映射一整个配置文件目录")]),e._v(" "),t("p",[e._v("在宿主机中提供一个装有自定义配置文件的目录，然后将整个宿主机的配置文件目录映射给 docker 容器，“对上” 容器中的配置文件目录。"),t("strong",[e._v("docker 官方推荐这种方式。")])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("方式二：")]),e._v(" 单映射某个配置文件")]),e._v(" "),t("p",[e._v("在宿主机中提供自定义的配置文件，然后将配置文件映射给 docker 容器，“对上” 容器中的配置文件。")])])]),e._v(" "),t("p",[e._v("第一种写法的好处在于，它统一了映射风格。无论你是要映射数据目录，还是日志目录，亦或者是配置文件目录，你都是在 “映射目录” ，你所需要提供的 "),t("code",[e._v("-v")]),e._v(" 的写法是统一的。")]),e._v(" "),t("p",[e._v("但是坏处在于，如果某个软件有多个配置文件，而我们只需要改其中的某一个，在这种情况下我们仍然要准备好全套的配置文件"),t("small",[e._v("（其中，有一个有变动，其它 N-1 个和默认配置一致）")]),e._v("。否则，如果你的配置文件目录下，有且仅有你要自定义的那个配置文件的话，那么等同于你没有提供另外的 N-1 个配置。")]),e._v(" "),t("h2",{attrs:{id:"_2-第二种写法的有点和缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-第二种写法的有点和缺点"}},[e._v("#")]),e._v(" 2. 第二种写法的有点和缺点")]),e._v(" "),t("p",[e._v("第二种写法在这种情况下可以帮我们 “"),t("strong",[e._v("偷懒")]),e._v("” 。我们仅需要提供、映射那个要自动定义的配置文件，其它的配置文件我们没有提供，也没有 “覆盖” 它们，它在容器中仍然存在，这种情况下，我们就偷了个懒，不用再提供 N-1 个配置了。")]),e._v(" "),t("p",[e._v("但是第二种写法在能帮我们 “提供偷懒的便利” 的同时，也会引入一个小 “"),t("strong",[e._v("坑")]),e._v("” ：当你使用 docker run 或者 docker-compose 且指定了挂载时，如果你所指定的挂载路劲不存在，那么 docker 会帮你创建它，但是，"),t("strong",[e._v("它一定创建成目录，一定不会是文件！")])]),e._v(" "),t("p",[e._v("例如：")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("-v ~/docker/3306/data:/var/lib/mysql\n-v ~/docker/3306/config/conf.d/mysql.cnf:/etc/mysql/conf.d/mysql.cnf\n")])])]),t("p",[e._v("以上述的 mysql 的挂载为例，假设 "),t("code",[e._v("~/docker/3306")]),e._v(" 这个目录根本就不存在，而于此同时，在我们 “心里” 我们想映射一个目录一个配置文件。当你去执行 "),t("code",[e._v("docker run")]),e._v(" 或者 docker-compose 命令时，由于这两个要挂载的路径不存在，所以 docker 会 “帮” 我们去创建 "),t("code",[e._v("~/docker/3306/data")]),e._v(" 和 "),t("code",[e._v("~/docker/3306/config/conf.d/mysql.cnf")]),e._v(" 。")]),e._v(" "),t("p",[e._v("但是，Docker 不会管、也不会知道我们 “心里的想法” ，它会把这两个路径全部创建成目录！很显然，对于我们 “想要” 映射的第二项，这明显是一个错误。")]),e._v(" "),t("div",{staticClass:"custom-block danger"},[t("p",{staticClass:"custom-block-title"},[e._v("警告")]),e._v(" "),t("p",[e._v("在使用 docker 和 docker-compose 时，不要指望它们来 “帮” 我们创建目录和文件！有什么需要创建的，自己先创建出来，再执行 docker run 和 docker-compose 。")])]),e._v(" "),t("h2",{attrs:{id:"_3-mysql-默认配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-mysql-默认配置"}},[e._v("#")]),e._v(" 3. MySQL 默认配置")]),e._v(" "),t("p",[e._v("这两个配置文件在容器内的 "),t("code",[e._v("/etc/mysql/conf.d")]),e._v(" 目录下。")]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("docker.cnf")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[mysqld]\nskip-host-cache\nskip-name-resolve\n")])])])]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("mysql.cnf")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[mysql]\n")])])])]),e._v(" "),t("h2",{attrs:{id:"_4-redis-默认配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-redis-默认配置"}},[e._v("#")]),e._v(" 4. Redis 默认配置")]),e._v(" "),t("p",[e._v("Redis 要求配置文件必须放在 "),t("code",[e._v("/usr/local/etc/redis/")]),e._v(" 下。")]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("redis.conf（ 6.2.1 ）")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('bind 127.0.0.1 -::1\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize no\npidfile /var/run/redis_6379.pid\nloglevel notice\nlogfile ""\ndatabases 16\nalways-show-logo no\nset-proc-title yes\nproc-title-template "{title} {listen-addr} {server-mode}"\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\nrdb-del-sync-files no\ndir ./\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-diskless-load disabled\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nacllog-max-len 128\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nlazyfree-lazy-user-del no\nlazyfree-lazy-user-flush no\noom-score-adj no\noom-score-adj-values 0 200 800\ndisable-thp yes\nappendonly no\nappendfilename "appendonly.aof"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nlua-time-limit 5000\nslowlog-log-slower-than 10000\nslowlog-max-len 128\nlatency-monitor-threshold 0\nnotify-keyspace-events ""\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\nlist-max-ziplist-size -2\nlist-compress-depth 0\nset-max-intset-entries 512\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\nhll-sparse-max-bytes 3000\nstream-node-max-bytes 4096\nstream-node-max-entries 100\nactiverehashing yes\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit replica 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\nhz 10\ndynamic-hz yes\naof-rewrite-incremental-fsync yes\nrdb-save-incremental-fsync yes\njemalloc-bg-thread yes\n')])])]),t("h2",{attrs:{id:"_5-rabbitmq-默认配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-rabbitmq-默认配置"}},[e._v("#")]),e._v(" 5. RabbitMQ 默认配置")]),e._v(" "),t("p",[e._v("RabbitMQ 的配置文件 "),t("code",[e._v("rabbitmq.config")]),e._v(" 在容器内的 "),t("code",[e._v("/etc/rabbitmq/")]),e._v(" 下。")]),e._v(" "),t("p",[e._v("其中的有效内容"),t("small",[e._v("（取消注释）")]),e._v("为：")]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("rabbitmq.config")]),e._v(" "),t("div",{staticClass:"language-properties extra-class"},[t("pre",{pre:!0,attrs:{class:"language-properties"}},[t("code",[t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("loopback_users.guest")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("false")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("listeners.tcp.default")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("5672")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("management.tcp.port")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("15672")]),e._v("\n")])])])])]),e._v(" "),t("h2",{attrs:{id:"_6-nginx-默认配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-nginx-默认配置"}},[e._v("#")]),e._v(" 6. Nginx 默认配置")]),e._v(" "),t("p",[e._v("Nginx 配置文件 "),t("code",[e._v("nginx.conf")]),e._v(" 在容器内的 "),t("code",[e._v("/etc/nginx/")]),e._v(" 下。"),t("small",[e._v("低版本的 nginx 不在这里，留意日志中的错误信息。")])]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("nginx.conf")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('user  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n                      \'$status $body_bytes_sent "$http_referer" \'\n                      \'"$http_user_agent" "$http_x_forwarded_for"\';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    include /etc/nginx/conf.d/*.conf;\n}\n')])])])]),e._v(" "),t("h2",{attrs:{id:"_7-nacos-默认配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-nacos-默认配置"}},[e._v("#")]),e._v(" 7. Nacos 默认配置")]),e._v(" "),t("p",[e._v("Nacos 的配置文件 "),t("code",[e._v("custom.properties")]),e._v(" 在容器内的 "),t("code",[e._v("/home/nacos/init.d/")]),e._v(" 下。")]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("custom.properties 有效（去掉注释）默认内容")]),e._v(" "),t("div",{staticClass:"language-properties extra-class"},[t("pre",{pre:!0,attrs:{class:"language-properties"}},[t("code",[t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("management.endpoints.web.exposure.include")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("*")]),e._v("\n")])])])])])}),[],!1,null,null,null);s.default=n.exports}}]);