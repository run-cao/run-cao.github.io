(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{538:function(s,t,a){"use strict";a.r(t);var e=a(62),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"flex-布局-下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-布局-下"}},[s._v("#")]),s._v(" Flex 布局（下）")]),s._v(" "),a("p",[s._v("《上篇》中的 4 个属性：flex-direction、flex-wrap、justify-content、align-items ，都是在 flex container"),a("small",[s._v("（容器，即父元素）")]),s._v("身上的，而接下来的几个属性，则是用在 flex item（项，即子元素）身上的。")]),s._v(" "),a("h2",{attrs:{id:"_1-align-self"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-align-self"}},[s._v("#")]),s._v(" 1. align-self")]),s._v(" "),a("p",[s._v("为某一个 item 指定 "),a("strong",[s._v("align-self")]),s._v(" ，可以让不遵守父容器的 align-items 属性，从而让它和 “它的兄弟们” 显得与众不同。")]),s._v(" "),a("p",[s._v("即，item 的 align-self 的设置会覆盖其继承自 container 的 align-items 。")]),s._v(" "),a("p",[s._v("例如，它的兄弟们遵照父元素的设置都对其交叉轴的起始，而其中某个孩子却位于交叉轴的末端。")]),s._v(" "),a("p",[s._v("[flex-13.png]")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".item")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("align-self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" auto | flex-start | flex-end | center | baseline | stretch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("h2",{attrs:{id:"_2-flex-grow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-flex-grow"}},[s._v("#")]),s._v(" 2. flex-grow")]),s._v(" "),a("p",[s._v("flex-grow 用来设置当前 item 的放大比例。默认为 0，即如果存在剩余空间，也不放大。")]),s._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),a("p",[s._v("当 flex-grow “起作用” 时，子元素的宽度就不是你所指定的子元素的 width 的值那么宽了，它会被拉长。")])]),s._v(" "),a("p",[s._v("有这样一种很常见情况，container 中的所有的 item 的长度都没 “占满” container 的长度，那么很显然，父元素 container 的剩下的、多余的长度为：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("剩余空间 = 父宽 - 子1宽 - 子2宽 - 子3宽 - ...\n")])])]),a("p",[s._v("默认情况下，各个子元素的 flex-grow 的值都是 0 ，这种情况下，各个子元素都会对父元素的剩余空间视而不见。父元素的剩余空间空着也就空着了。")]),s._v(" "),a("p",[s._v("如果有一个或多个子元素设置了 flex-grow ，且值为非零，那么 flex 会把各个子元素的 flex-grow 的值累加起来，然后将父元素的剩余空间按 x/N 分配给各个子元素，从而 “消灭” 掉父元素的剩余空间。")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),a("p",[s._v("这个思路和负载均衡中的权重的逻辑一样。")])]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".item")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex-grow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" <number>"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* default 0 */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),a("p",[s._v("这种情况下，各个相关子元素的 width 会被拉长，不再是你当初指定的 width 那么长了。")])]),s._v(" "),a("p",[s._v("最极端的情况是，有且仅有一个子元素设置了 "),a("code",[s._v("flex-grow: 1")]),s._v("，其他子元素没有设置，即 "),a("code",[s._v("flex-grow: 0")]),s._v("，这种情况下父元素的所有剩余空间就都 “给” 那一个元素。")]),s._v(" "),a("h2",{attrs:{id:"_3-flex-basis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-flex-basis"}},[s._v("#")]),s._v(" 3. flex-basis")]),s._v(" "),a("p",[s._v("子元素的 "),a("strong",[s._v("flex-basis")]),s._v(" 属性是子元素 width 属性的替代品，它和 width 属性一样，值为具体的数字或 auto 。")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".item")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex-grow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" <number>"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* default 0 */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("之所以 “多此一举” 又弄出一个一摸一样作用的属性来替代 width 属性是一因为在前面 flex-grow 属性中，大家也能感觉到：使用 width 属性有点 “奇怪” ，因为当你指定了一个子元素的 width 之后，它的实际的 width 可能和你指定的不一样！它可能会被拉长"),a("small",[s._v("（也有可能会被压缩）")]),s._v("。")]),s._v(" "),a("p",[s._v("因此，CSS 提出了一个语义更合理的属性来替代 flex item 的 width 属性值，从而让这个宽度的设置不那么 “别扭” 。")]),s._v(" "),a("h2",{attrs:{id:"_4-flex-shrink"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-flex-shrink"}},[s._v("#")]),s._v(" 4. flex-shrink")]),s._v(" "),a("p",[a("strong",[s._v("flex-shrink")]),s._v(" 和 上面的 flex-grow 的作用类似，只不过它是用在父容器宽度不够的情况下，压缩子元素的。")]),s._v(" "),a("p",[s._v("如果 "),a("code",[s._v("父宽 < 子1宽 + 子2宽 + 子3宽 + ...")]),s._v(" ，而且，你又没有使用 flex-wrap 来要求子元素"),a("small",[s._v("（沿交叉轴）")]),s._v("换行，那么父元素 “欠” 下的宽度就需要从子元素那里 “补” 出来。")]),s._v(" "),a("p",[s._v("即，这种情况下，子元素的实际宽度会小于你当初设置的 width"),a("small",[s._v("（这也是在 flex 中使用 flex-basis 来代替 width 的原因，省得你想着 “别扭”）")]),s._v("。")]),s._v(" "),a("p",[s._v("各个子元素的 flex-shirnk 的属性值默认为 "),a("code",[s._v("1")]),s._v(" ，即，当父元素的宽度不够"),a("small",[s._v("（且又不让换行）")]),s._v("时，各个子元素被压缩，分摊父元素不够的宽度的 1/N 。")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".item")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex-shrink")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" <number>"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* default 1 */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("如果有某个"),a("small",[s._v("（或某些个）")]),s._v("子元素的 flex-shirnk 被设为 0 ，那意味着它"),a("small",[s._v("（或它们）")]),s._v("不参与为父元素 “还债” 的过程。")]),s._v(" "),a("h2",{attrs:{id:"_5-三合一属性-flex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-三合一属性-flex"}},[s._v("#")]),s._v(" 5. 三合一属性：flex")]),s._v(" "),a("p",[a("strong",[s._v("flex")]),s._v(" 属性是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 "),a("code",[s._v("0 1 auto")]),s._v(" 。后两个属性可选。")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".item")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" none | [ <"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'flex-grow'")]),s._v("> <"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'flex-shrink'")]),s._v(">? || <"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'flex-basis'")]),s._v("> ]\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("该属性有两个快捷值：")]),s._v(" "),a("ul",[a("li",[s._v("auto：等同于 "),a("code",[s._v("1 1 auto")]),s._v(" ；")]),s._v(" "),a("li",[s._v("none：等同于 "),a("code",[s._v("0 0 auto")]),s._v(" 。")])])])}),[],!1,null,null,null);t.default=n.exports}}]);